{{~ func default_value(property)
   if ((get_type property) == "Date")
     ret "new Date().toISOString().split('.')[0]"
    end
   ret get_default_value property
end ~}}
const ref = Vue.ref;
const watch = Vue.watch;
const computed = Vue.computed;
{{~ for class in classes
  if class.is_root
    root = class
    break
  end 
end ~}}
const app = Vue.createApp({
  template: `
  {{~ for property in root.child_references ~}}
  {{~ if property.is_collection ~}}
  <{{ kebab_case property.class.name.plural }} v-model="{{ camel_case root.name }}.{{ camel_case property.name }}"></{{ kebab_case property.class.name.plural }}>
  {{~ else ~}}
  <{{ kebab_case property.class.name }} v-model="{{ camel_case root.name }}.{{ camel_case property.name }}"></{{ kebab_case property.class.name }}>
  {{~ end ~}}
  {{~ end ~}}
  `,
  name: 'App',
  setup: function () {
    const {{ camel_case root.name }} = ref(null);
    {{~ if input ~}}
    {{ camel_case root.name }}.value = {{input}};
    {{~ else ~}}
    function loadFromLocalStorage() {
      let json = localStorage.getItem('json');
      if (json && json !== JSON.stringify({{ camel_case root.name }}.value)) {
        {{ camel_case root.name }}.value = JSON.parse(json);
      }
    }
    loadFromLocalStorage();

    window.addEventListener('storage', loadFromLocalStorage);
    {{~ end ~}}
    return { {{ camel_case root.name }} }
  },
});

app.config.globalProperties.$filters = {
  formatDatetime(date) {
    if (date) {
      return new Date(date).toLocaleString()
    }
    return '';
  }
};

app.component('pagination', {
  template: `
  <div>
    <i class="bi-chevron-left" :class="{clickable:pageIdx > 1, disabled: pageIdx === 1}" @click="toPage(pageIdx-1)"></i>
    <span v-for="n in pageCount" class="clickable px-2" :class="{active: n === pageIdx}" @click="toPage(n)">{{'{{'}} n {{'}}'}}</span>
    <i class="bi-chevron-right" :class="{clickable: pageIdx < pageCount, disabled: pageIdx === pageCount}" @click="toPage(pageIdx+1)"></i>
    <p>
    rows per page:
    <select v-model="pageSize">
      <option>5</option>
      <option>10</option>
      <option>20</option>
      <option>50</option>
    </select>
    </p>
  </div>
  `,
  props: {
    count: Number,
  },
  emits:['range'],
  setup(props, context) {
    const pageIdx = ref(0);
    const pageSize = ref(5);
    const pageCount = computed(() => Math.ceil(props.count / pageSize.value));
    watch(pageCount, function() {
      toPage(1)
    });
    function toPage(idx) {
      if (idx < 1 || idx > pageCount.value) {
        return
      }
      pageIdx.value = idx;
      context.emit('range', (idx - 1) * pageSize.value, idx * pageSize.value)
    }
    toPage(1);
    return { pageCount, pageIdx, pageSize, toPage }
  }
});

{{~ for class in classes
      if class.is_root
        continue
      end ~}}
app.component('{{ kebab_case class.name }}-data', {
  template: `
    {{~ for property in class.base_properties ~}}
    <td class="align-middle">
    {{~ if (get_type property) == "Date" ~}}
      {{'{{'}} $filters.formatDatetime(value.{{ camel_case property.name }}) {{'}}'}}
    {{~ else ~}}
      {{'{{'}} value.{{ camel_case property.name }} {{'}}'}}
    {{~ end ~}}
    </td>
    {{~ end ~}}
    {{~ for property in class.child_references ~}}
    <td class="align-middle">
      <button type="button" class="btn btn-sm rounded-pill" @click="$emit('show', '{{ camel_case property.name }}')">
        <span class="bi bi-eye" aria-hidden="true"></span>
      </button>
    </td>
    {{~ end ~}}
  `,
  name: '{{ class.name }}View',
  props: {
    value: Object
  },
  emits: [{{ if class.has_child }}'show'{{ end }}]
});

app.component('{{ kebab_case class.name }}-row', {
  template: `
  <tr>
    <{{ kebab_case class.name }}-data :value="modelValue" {{ if class.has_child }}@show="show"{{ end }} v-else></{{ kebab_case class.name }}-data>
  </tr>
  `,
  name: '{{ class.name }}Row',
  props: {
    modelValue: Object
  },
  emits: [{{ if class.has_child }}'show'{{ end }}],
  setup(props, context) {
    {{~ if class.has_child ~}}
    function show(property) {
      context.emit('show', property);
    }
    {{~ end ~}}
    return { {{ if class.has_child }}show{{ end }} }
  }
});

app.component('{{ kebab_case class.name }}-table', {
  template: `
  <table class="table text-start">
    <thead>
      <tr class="table-light">
        {{~ for property in class.base_properties ~}}
        <th scope="col" @click="sort('{{ camel_case property.name }}')" v-if="sortable">
          {{ to_words property.name }}
          <i class="bi-caret-up-fill" v-if="orderBy === '{{ camel_case property.name }}' && orderAsc"></i>
          <i class="bi-caret-down-fill" v-if="orderBy === '{{ camel_case property.name }}' && !orderAsc"></i>
        </th>
        <th scope="col" v-else>
          {{ to_words property.name }}
        </th>
        {{~ end ~}}
        {{~ for property in class.child_references
          ~}}
          <th scope="col">
          {{ to_words property.name }}
          </th>
        {{~ end ~}}
      </tr>
    </thead>
    <tbody>
      <slot></slot>
    </tbody>
  </table>`,
  name: '{{ class.name }}Table',
  props: {
    modelValue: Array,
    sortable: Boolean
  },
  emits: ['sort'],
  setup(props, context) {
    const orderBy = ref('');
    const orderAsc = ref(true);
    function sort(propName) {
      if (orderBy.value === propName) {
        orderAsc.value = !orderAsc.value
      } else {
        orderBy.value = propName
      }
      context.emit('sort', orderBy.value, orderAsc.value)
    }
    return {orderBy, orderAsc, sort}
  }
});
{{~ if class.referred_single ~}}
app.component('{{ kebab_case class.name }}', {
  template: `
  {{~ if class.has_child ~}}
  <h5 class="d-inline-block disabled px-2 float-start" v-if="activeProperty === null">{{ class.name.plural }}</h5>
  <h5 class="d-inline-block clickable px-2 float-start" @click="activeProperty = null" v-if="activeProperty !== null">{{ class.name.plural }}</h5>
  <h5 class="d-inline-block float-start" v-if="activeProperty !== null">/</h5>
  {{~ else ~}}
  <h5 class="d-inline-block disabled px-2 float-start">{{ class.name.plural }}</h5>
  {{~ end ~}}
  <{{ kebab_case class.name }}-table :sortable="false" {{ if class.has_child }} v-if="activeProperty === null"{{ end }}>
    <{{ kebab_case class.name }}-row :modelValue="modelValue" {{ if class.has_child }}@show="show"{{ end }} v-if="modelValue"></{{ kebab_case class.name }}-row>
  </{{ kebab_case class.name }}-table>
  {{~ for property in class.child_references ~}}
    {{~ if property.is_collection ~}}
    <{{ kebab_case property.class.name.plural }} :modelValue="modelValue[activeProperty]" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name.plural }}>
    {{~ else ~}}
    <{{ kebab_case property.class.name }} :modelValue="modelValue[activeProperty]" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name }}>
    {{~ end ~}}
  {{~ end ~}}`,
  name: '{{ class.name }}',
  props: {
    modelValue: Object
  },
  emits: [{{ if class.has_child }}'show'{{ end }}],
  setup(props, context) {
    {{~ if class.has_child ~}}
    const activeProperty = ref(null);
    {{~ end ~}}

    {{~ if class.has_child ~}}
    function show(property) {
      activeProperty.value = property;
    }
    {{~ end ~}}
    return { {{ if class.has_child }}show, activeProperty{{ end }} }
  }
});
{{~ end ~}}

{{~ if class.referred_plural ~}}
app.component('{{ kebab_case class.name.plural }}', {
  template: `
  {{~ if class.has_child ~}}
  <h5 class="d-inline-block disabled px-2 float-start" v-if="activeProperty === null">{{ class.name.plural }}</h5>
  <h5 class="d-inline-block clickable px-2 float-start" @click="activeProperty = null" v-if="activeProperty !== null">{{ class.name.plural }}</h5>
  <h5 class="d-inline-block float-start" v-if="activeProperty !== null">/</h5>
  {{~ else ~}}
  <h5 class="d-inline-block disabled px-2 float-start">{{ class.name.plural }}</h5>
  {{~ end ~}}
  <{{ kebab_case class.name }}-table :sortable="true" @sort="sort" {{ if class.has_child }} v-if="activeProperty === null"{{ end }}>
    <{{ kebab_case class.name }}-row v-for="item in items" :key="item.idx" :modelValue="item.value" {{ if class.has_child }}@show="show(item.idx, $event)"{{ end }} v-if="modelValue"></{{ kebab_case class.name }}-row>
  </{{ kebab_case class.name }}-table>
  <div {{ if class.has_child }} v-if="activeProperty === null"{{ end }}>
    <pagination :count="modelValue.length" @range="setRange"></pagination>
  </div>
  {{~ for property in class.child_references ~}}
  {{~ if property.is_collection ~}}
  <{{ kebab_case property.class.name.plural }} :modelValue="modelValue[activeIdx][activeProperty]" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name.plural }}>
  {{~ else ~}}
  <{{ kebab_case property.class.name }} :modelValue="modelValue[activeIdx][activeProperty]" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name }}>
  {{~ end ~}}
  {{~ end ~}}`,
  name: '{{ class.name }}List',
  props: {
    modelValue: Array
  },
  emits: [{{ if class.has_child }}'show'{{ end }}],
  setup(props, context) {
    const orderBy = ref('');
    const orderAsc = ref(true);
    const rangeStart = ref(0);
    const rangeEnd = ref(props.modelValue.length);
    const items = computed(function(){
      if (!props.modelValue)
        return [];
      const newList = props.modelValue.map((value, idx) => { return {idx, value} });
      const ordBy = orderBy.value;
      const asc = orderAsc.value;
      if (ordBy !== '')
        newList.sort((a, b) => { 
            if (a.value[ordBy] < b.value[ordBy] ^ asc)
              return 1;
            if (a.value[ordBy] > b.value[ordBy] ^ asc)
              return -1;
            return 0
          });
      return newList.slice(rangeStart.value, rangeEnd.value);
    });
    {{~ if class.has_child ~}}
    const activeProperty = ref(null);
    const activeIdx = ref(null);

    function show(idx, property) {
      activeIdx.value = idx;
      activeProperty.value = property;
    }
    {{~ end ~}}

    function sort(propName, asc) {
      orderBy.value = propName;
      orderAsc.value = asc;
    }
    
    function setRange(start, end) {
      rangeStart.value = start;
      rangeEnd.value = end;
    }

    return {
      sort,
      setRange,
      items{{ if class.has_child }},
      show,
      activeIdx,
      activeProperty
      {{~ end ~}}
    };
  }
});
{{~ end ~}}
{{~ end ~}}

app.mount('#app');
