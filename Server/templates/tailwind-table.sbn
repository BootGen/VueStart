{{~ func default_value(property)
   if ((get_type property) == "Date")
     ret "new Date().toISOString().split('.')[0]"
    end
   ret get_default_value property
end ~}}
const ref = Vue.ref;
const watch = Vue.watch;
const computed = Vue.computed;
{{~ for class in classes
  if class.is_root
    root = class
    break
  end 
end ~}}
const app = Vue.createApp({
  template: `
  {{~ for property in root.child_references ~}}
  {{~ if property.is_collection ~}}
  <{{ kebab_case property.class.name }}-table :value="{{ camel_case root.name }}.{{ camel_case property.name }}" :pageSize="pageSize" @update:pageSize="updatePageSize"></{{ kebab_case property.class.name }}-table>
  {{~ else ~}}
  <{{ kebab_case property.class.name }}-table-single-row :value="{{ camel_case root.name }}.{{ camel_case property.name }}" :pageSize="pageSize" @update:pageSize="updatePageSize"></{{ kebab_case property.class.name }}>
  {{~ end ~}}
  {{~ end ~}}
  `,
  name: 'App',
  setup: function () {
    const {{ camel_case root.name }} = ref(null);
    const pageSize = ref(5);
    {{~ if input ~}}
    {{ camel_case root.name }}.value = {{input}};
    {{~ else ~}}
    function loadFromLocalStorage() {
      let json = localStorage.getItem('{{ generated_id }}');
      if (json && json !== JSON.stringify({{ camel_case root.name }}.value)) {
        {{ camel_case root.name }}.value = JSON.parse(json);
      }
    }
    loadFromLocalStorage();

    window.addEventListener('storage', loadFromLocalStorage);
    {{~ end ~}}
    function updatePageSize(size) {
      pageSize.value = size;
    }
    return { {{ camel_case root.name }}, pageSize, updatePageSize }
  },
});

app.config.globalProperties.$filters = {
  formatDatetime(date) {
    if (date) {
      return new Date(date).toLocaleString()
    }
    return '';
  }
};

app.component('pagination', {
  template: `
  <nav aria-label="Page navigation">
    <ul class="inline-flex items-center -space-x-px">
      <li>
        <a href="javascript:void(0)" class="block py-2 px-3 ml-0 leading-tight text-gray-500 bg-white rounded-l-lg border border-gray-300" @click="toPage(pageIdx-1)" :class="{'hover:bg-gray-100 hover:text-gray-700': pageIdx !== 1 && pageCount !== 0 }">
          <span class="sr-only">Previous</span>
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path>
          </svg>
        </a>
      </li>
      <li v-if="pageCount > 0" v-for="n in pageCount" :key="n" @click="toPage(n)">
        <a href="javascript:void(0)" class="block py-2 px-3 leading-tight bg-white border border-gray-300 hover:bg-gray-100" :class="{'text-primary': n === pageIdx, 'text-gray-500 hover:text-gray-700': n !== pageIdx }">{{'{{'}} n {{'}}'}}</a>
      </li>
      <li v-else">
        <a href="javascript:void(0)" class="block py-2 px-3 leading-tight bg-white text-gray-500 border border-gray-300">No results</a>
      </li>
      <li>
        <a href="javascript:void(0)" class="block py-2 px-3 ml-0 leading-tight text-gray-500 bg-white rounded-r-lg border border-gray-300" @click="toPage(pageIdx+1)" :class="{'hover:bg-gray-100 hover:text-gray-700': pageIdx !== pageCount && pageCount !== 0 }">
          <span class="sr-only">Next</span>
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
        </a>
      </li>
    </ul>
  </nav>
  <p>
    rows per page:
    <select v-model="pageSize" @input="$emit('update:pageSize', $event.target.value)">
      <option>5</option>
      <option>10</option>
      <option>20</option>
      <option>50</option>
    </select>
  </p>
  `,
  name: 'Pagination',
  props: {
    count: Number,
    pageSize: Number
  },
  emits:['range', 'update:pageSize'],
  setup(props, context) {
    const pageIdx = ref(0);
    const pageCount = computed(() => Math.ceil(props.count / props.pageSize));
    watch(pageCount, function() {
      toPage(1)
    });
    function toPage(idx) {
      if (idx < 1 || idx > pageCount.value) {
        return
      }
      pageIdx.value = idx;
      context.emit('range', (idx - 1) * props.pageSize, idx * props.pageSize)
    }
    toPage(1);
    return { pageCount, pageIdx, toPage }
  }
});

app.component('search', {
  template: `
  <div class="flex justify-center">
    <div class="w-full mt-4">
      <input
        type="search"
        v-model="modelValue" @input="$emit('update:modelValue', $event.target.value)"
        class="
          form-control
          block
          w-full
          px-3
          py-1.5
          text-gray-700
          border border-solid border-gray-300
          rounded
          m-0
          focus:text-gray-700 focus:bg-white focus:border-primary focus:outline-none
        "
        placeholder="Search..."
      />
    </div>
  </div>
  `,
  name: 'Search',
  props: {
    modelValue: String,
  },
  emits:['update:modelValue']
});

{{~ for class in classes
      if class.is_root
        continue
      end ~}}
app.component('{{ kebab_case class.name }}-row', {
  template: `
  <tr>
    {{~ for property in class.primitive_properties ~}}
    <td class="border-b border-slate-100 p-4 text-slate-500 text-left">
    {{~ if property.built_in_type == "Uri" ~}}
      <a href="{{'{{'}} value.{{ camel_case property.name }} {{'}}'}}" target="_blank">{{'{{'}} value.{{ camel_case property.name }} {{'}}'}}</a>
    {{~ else if property.built_in_type == "Image" ~}}
      <img class="object-cover" :src="value.{{ camel_case property.name }}" alt="img" width="50" height="50">
    {{~ else if (get_type property) == "Date" ~}}
      {{'{{'}} $filters.formatDatetime(value.{{ camel_case property.name }}) {{'}}'}}
    {{~ else ~}}
      {{'{{'}} value.{{ camel_case property.name }} {{'}}'}}
    {{~ end ~}}
    </td>
    {{~ end ~}}
    {{~ for property in class.child_references ~}}
    <td class="border-b border-slate-100 p-4 text-slate-500 text-left">
      <button class="bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 rounded-full" @click="$emit('show', '{{ camel_case property.name }}')">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1">
          <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
          <path stroke-linecap="round" stroke-linejoin="round" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
        </svg>
      </button>
    </td>
    {{~ end ~}}
  </tr>
  `,
  name: '{{ class.name }}Row',
  props: {
    value: Object
  },
  {{ if class.has_child }}emits: ['show'],{{ end }}
  setup(props, context) {
    {{~ if class.has_child ~}}
    function show(property) {
      context.emit('show', property);
    }
    {{~ end ~}}
    return { {{ if class.has_child }}show{{ end }} }
  }
});

app.component('{{ kebab_case class.name }}-table-template', {
  template: `
  <table class="border-collapse table-auto w-full mt-2 mb-6">
    <thead>
      <tr>
        {{~ for property in class.primitive_properties ~}}
        <th class="group cursor-pointer border-b font-medium p-4 pt-0 pb-3 text-left" @click="sort('{{ camel_case property.name }}')">
          {{ property.visible_name }}
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block invisible group-hover:visible group-hover:opacity-40" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1" v-if="orderBy !== '{{ camel_case property.name }}' && orderAsc">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5 15l7-7 7 7" />
          </svg>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block invisible group-hover:visible group-hover:opacity-40" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1" v-if="orderBy !== '{{ camel_case property.name }}' && !orderAsc">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
          </svg>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1" v-if="orderBy === '{{ camel_case property.name }}' && orderAsc">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5 15l7-7 7 7" />
          </svg>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1" v-if="orderBy === '{{ camel_case property.name }}' && !orderAsc">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
          </svg>
        </th>
        {{~ end ~}}
        {{~ for property in class.child_references ~}}
        <th class="border-b font-medium p-4 pt-0 pb-3 text-left">
        {{ property.visible_name }}
        </th>
        {{~ end ~}}
      </tr>
    </thead>
    <tbody>
      <slot></slot>
    </tbody>
  </table>`,
  name: '{{ class.name }}Table',
  props: {
    value: Array
  },
  emits: ['sort'],
  setup(props, context) {
    const orderBy = ref('');
    const orderAsc = ref(true);
    function sort(propName) {
      if (orderBy.value === propName) {
        orderAsc.value = !orderAsc.value
      } else {
        orderBy.value = propName
      }
      context.emit('sort', orderBy.value, orderAsc.value)
    }
    return {orderBy, orderAsc, sort}
  }
});
{{~ if class.referred_single ~}}
app.component('{{ kebab_case class.name }}-table-single-row', {
  template: `
  {{~ if class.has_child ~}}
  <h5 class="text-disabled table-cell font-bold" v-if="activeProperty === null">{{ class.name }}</h5>
  <h5 class="text-primary hover:text-primaryHover cursor-pointer table-cell font-bold" @click="activeProperty = null" v-else>{{ class.name }}</h5>
  <h5 class="text-primary px-2 table-cell font-bold" v-if="activeProperty !== null">/</h5>
  {{~ else ~}}
  <h5 class="text-disabled table-cell font-bold">{{ class.name }}</h5>
  {{~ end ~}}
  <{{ kebab_case class.name }}-table-template {{ if class.has_child }} v-if="activeProperty === null"{{ end }}>
    <{{ kebab_case class.name }}-row :value="value" {{ if class.has_child }}@show="show"{{ end }} v-if="value"></{{ kebab_case class.name }}-row>
  </{{ kebab_case class.name }}-table-template>
  {{~ for property in class.child_references ~}}
      {{~ if property.is_collection ~}}
      <{{ kebab_case property.class.name }}-table :value="value[activeProperty]" :pageSize="pageSize" @update:pageSize="updatePageSize" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name }}-table>
      {{~ else ~}}
      <{{ kebab_case property.class.name }}-table-single-row :value="value[activeProperty]" :pageSize="pageSize" @update:pageSize="updatePageSize" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name }}>
      {{~ end ~}}
  {{~ end ~}}`,
  name: '{{ class.name }}',
  props: {
    value: Object,
    pageSize: Number
  },
  emits: ['update:pageSize'{{ if class.has_child }}, 'show'{{ end }}],
  setup(props, context) {
    {{~ if class.has_child ~}}
    const activeProperty = ref(null);
    {{~ end ~}}
    
    {{~ if class.has_child ~}}
    function show(property) {
      activeProperty.value = property;
    }
    {{~ end ~}}
    function updatePageSize(size) {
      context.emit('update:pageSize', size);
    }
    return { updatePageSize{{ if class.has_child }}, show, activeProperty{{ end }} }
  }
});
{{~ end ~}}

{{~ if class.referred_plural ~}}
app.component('{{ kebab_case class.name }}-table', {
  template: `
  {{~ if class.has_child ~}}
  <h5 class="text-disabled table-cell font-bold" v-if="activeProperty === null">{{ class.name.plural }}</h5>
  <h5 class="text-primary hover:text-primaryHover cursor-pointer table-cell font-bold" @click="activeProperty = null" v-else>{{ class.name.plural }}</h5>
  <h5 class="text-primary px-2 table-cell font-bold" v-if="activeProperty !== null">/</h5>
  <search v-if="activeProperty === null" :modelValue="searchText" @update:modelValue="updateSearchText"></search>
  {{~ else ~}}
  <h5 class="text-disabled table-cell font-bold">{{ class.name.plural }}</h5>
  <search :modelValue="searchText" @update:modelValue="updateSearchText"></search>
  {{~ end ~}}
  <{{ kebab_case class.name }}-table-template @sort="sort" {{ if class.has_child }} v-if="activeProperty === null"{{ end }}>
  <{{ kebab_case class.name }}-row v-for="item in items" :key="item.idx" :value="item.value" {{ if class.has_child }}@show="show(item.idx, $event)"{{ end }} v-if="value"></{{ kebab_case class.name }}-row>
  </{{ kebab_case class.name }}-table-template>
  <div {{ if class.has_child }} v-if="activeProperty === null"{{ end }}>
    <pagination :count="pageCount" :pageSize="pageSize" @range="setRange" @update:pageSize="updatePageSize"></pagination>
  </div>
  {{~ for property in class.child_references ~}}
      {{~ if property.is_collection ~}}
      <{{ kebab_case property.class.name }}-table :value="value[activeIdx][activeProperty]" @update:modelValue="updateChild" :pageSize="pageSize" @update:pageSize="updatePageSize" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name }}-table>
      {{~ else ~}}
      <{{ kebab_case property.class.name }}-table-single-row :value="value[activeIdx][activeProperty]" :pageSize="pageSize" @update:pageSize="updatePageSize" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name }}>
      {{~ end ~}}
  {{~ end ~}}`,
  name: '{{ class.name.plural }}',
  props: {
    value: Array,
    pageSize: Number
  },
  emits: ['update:pageSize'{{ if class.has_child }}, 'show'{{ end }}],
  setup(props, context) {
    const orderBy = ref('');
    const orderAsc = ref(true);
    const rangeStart = ref(0);
    const rangeEnd = ref(props.value.length);
    const searchText = ref('');
    const pageCount = ref(0);
    const items = computed(function(){
      if (!props.value)
        return [];
      const newList = props.value.map((value, idx) => { return {idx, value} });
      if(searchText.value !== '') {
        const indexs = [];
        for (let i = 0; i < newList.length; i++) {
          let removeElement = true;
          for(const property in newList[i].value) {
            if(typeof(newList[i].value[property]) == 'object') {
              continue;
            }
            const element = newList[i].value[property].toString();
            if(element.toUpperCase().includes(searchText.value.toUpperCase())) {
              removeElement = false;
              break;
            }
          }
          if(removeElement) {
            indexs.push(newList[i].idx);
          }
        }
        for(let j = 0; j < indexs.length; j++) {
          for(let k = 0; k < newList.length; k++) {
            if(newList[k].idx == indexs[j]) {
              newList.splice(k, 1);
            }
          }
        }
      }
      const ordBy = orderBy.value;
      const asc = orderAsc.value;
      if (ordBy !== '')
        newList.sort((a, b) => { 
            if (a.value[ordBy] < b.value[ordBy] ^ asc)
              return 1;
            if (a.value[ordBy] > b.value[ordBy] ^ asc)
              return -1;
            return 0
          });
      pageCount.value = newList.length;
      return newList.slice(rangeStart.value, rangeEnd.value);
    });
    {{~ if class.has_child ~}}
    const activeProperty = ref(null);
    const activeIdx = ref(null);

    function show(idx, property) {
      activeIdx.value = idx;
      activeProperty.value = property;
    }
    {{~ end ~}}
    function sort(propName, asc) {
      orderBy.value = propName;
      orderAsc.value = asc;
    }
    function setRange(start, end) {
      rangeStart.value = start;
      rangeEnd.value = end;
    }
    function updateSearchText(text) {
      searchText.value = text;
    }
    function updatePageSize(size) {
      context.emit('update:pageSize', size);
    }

    return {
      sort,
      setRange,
      items,
      pageCount,
      updatePageSize,
      searchText,
      updateSearchText{{ if class.has_child }},
      show,
      activeIdx,
      activeProperty
      {{~ end ~}}
    };
  }
});
{{~ end ~}}
{{~ end ~}}

app.mount('#app');
