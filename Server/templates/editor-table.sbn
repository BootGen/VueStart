const ref = Vue.ref;
const reactive = Vue.reactive;
const watchEffect = Vue.watchEffect;
{{~ for class in classes
  if class.is_root
    root = class
    break
  end 
end ~}}
const  app = Vue.createApp({
  template: `
  <div class="d-flex breadcrumb mb-1">
    <div class="d-flex" v-for="(item, index) in breadcrumbs" :key="item">
      <h5 class="px-2 clickable" @click="sliceBreadcrumbs(index)">{{'{{'}} item.name {{'}}'}}</h5>
      <h5>/</h5>
    </div>
    <h5 class="disabled px-2">{{'{{'}} activeElement.name {{'}}'}}</h5>
  </div>
  {{~ for class in classes ~}}
  {{'{{'}} activeElement.name {{'}}'}}
  <{{ kebab_case class.name }}-list v-model="activeElement.obj[activeElement.property]" @show="show" v-if="activeElement.name == '{{ class.name.plural }}'"></{{ kebab_case class.name }}-list>
  {{~ end ~}}
  `,
  name: 'App',
  setup: function () {
    const {{ camel_case root.name }} = ref(null);
    const breadcrumbs = ref([]);
    const activeElement = ref(null);

    function show(name, property, obj) {
      if (activeElement.value)
        breadcrumbs.value.push(activeElement.value);
      activeElement.value = { name: name, property: property, obj: obj };
    }

    function sliceBreadcrumbs(idx){
      activeElement.value = breadcrumbs.value[idx];
      breadcrumbs.value = breadcrumbs.value.slice(0, idx);
    }
    
    function toDataModel(data) {
        const v = { ... data };
        for (const property in v) {
          if(Array.isArray(v[property])){
            v[property] = toDataArray(v[property]);
          }
        }
        return v
    }
    function toDataArray(data) {
      return data.map((val, idx) => {
        const v = { ... val };
        for (const property in v) {
          if(Array.isArray(v[property])){
            v[property] = toDataArray(v[property]);
          }
        }
        return {
          id: idx,
          value: v
        }
      })
    }
    function toSimpleObject(data) {
      let obj =  { ...data };
      for (const property in obj) {
        if(Array.isArray(obj[property])){
          obj[property] = toSimpleArray(obj[property]);
        }
      }
      return obj;
    }
    function toSimpleArray(data) {
      let arr =  data.map(val => {
        return { ...val.value }
      });
      arr.forEach(item => {
        for (const property in item) {
          if(Array.isArray(item[property])){
            item[property] = toSimpleArray(item[property]);
          }
        }
      });
      return arr;
    }
    function saveToLocalStorage(newValue) {
        let minimized = JSON.stringify(newValue);
        let oldValue = localStorage.getItem('json');
        if (minimized != oldValue) {
          localStorage.setItem('json', minimized);
        }
    }
    function loadFromLocalStorage() {
      let json = localStorage.getItem('json');
      if (json) {
        const val = JSON.parse(json);
        if (val) {
          {{ camel_case root.name }}.value = toDataModel(val);
          {{~ for property in root.properties
          if property.is_collection && property.class ~}}
          activeElement.value = { name: '{{ property.name }}', property: '{{ camel_case property.class.name.plural }}', obj: {{ camel_case root.name }}.value };
          {{~ end
        end ~}}
  
        }
      }
    }
    loadFromLocalStorage();

    watchEffect(() => {
      saveToLocalStorage(toSimpleObject({{ camel_case root.name }}.value));
    });

    window.addEventListener('storage', loadFromLocalStorage);
    return { {{ camel_case root.name }}, show, breadcrumbs, sliceBreadcrumbs, activeElement }
  },
});

app.config.globalProperties.$filters = {
  formatDatetime(date) {
    return date.replace('T', '. ').replaceAll('-', '.');
  }
};

{{~ for class in classes ~}}
app.component('{{ kebab_case class.name }}-view', {
  template: `
    {{~ for property in class.common_properties
      if !property.is_key ~}}
    <td class="align-middle">
    {{~ if (get_type property) == "Date" ~}}
      {{'{{'}} $filters.formatDatetime(modelValue.{{ camel_case property.name }}) {{'}}'}}
    {{~ else ~}}
      {{'{{'}} modelValue.{{ camel_case property.name }} {{'}}'}}
    {{~ end ~}}
    </td>
    {{~ end
        end ~}}
    {{~ for property in class.properties
      if property.is_collection && property.class ~}}
    <td class="align-middle">
      <button type="button" class="btn btn-sm rounded-pill" @click="$emit('show', '{{ property.name }}', '{{ camel_case property.name }}', modelValue)">
        <span class="bi bi-eye" aria-hidden="true"></span>
      </button>
    </td>
    {{~ end
      end ~}}
    <td class="align-middle text-end">
      <button type="button" class="btn btn-sm rounded-pill" @click="$emit('edit')">
        <span class="bi bi-pencil" aria-hidden="true"></span>
      </button>
      <button type="button" class="btn btn-sm rounded-pill" @click="$emit('delete')">
        <span class="bi bi-trash" aria-hidden="true"></span>
      </button>
    </td>
  `,
  name: '{{ class.name }}View',
  props: {
    modelValue: Object,
  },
  emits: ['edit',  'delete', 'show']
});

app.component('{{ kebab_case class.name }}-edit', {
  template: `
  {{~ for property in class.common_properties
  if !property.is_key ~}}
    <td class="align-middle">
      <div class="col-12 d-flex justify-content-start">
        <input 
        {{~ if (get_type property) == "Date" ~}}
        type="datetime-local"
        {{~ else if (get_type property) == "number" ~}}
        type="number"
        {{~ else ~}}
        type="text"
        {{~ end ~}} 
        class="form-control"
        v-model="editedItem.{{ camel_case property.name }}"
        :placeholder="{{ property.name }}">
      </div>
    </td>
    {{~ end
        end ~}}
        {{~ for property in class.properties
    if property.is_collection && property.class ~}}
    <td class="align-middle">
      <button type="button" class="btn btn-sm rounded-pill" @click="$emit('show', '{{ property.name }}', '{{ camel_case property.name }}', modelValue)">
        <span class="bi bi-eye" aria-hidden="true"></span>
      </button>
    </td>
    {{~ end
      end ~}}
    <td class="align-middle text-end">
      <button type="button" class="btn btn-sm rounded-pill" @click="save">
        <span class="bi bi-save" aria-hidden="true"></span>
      </button>
      <button type="button" class="btn btn-sm rounded-pill" @click="cancel">
        <span class="bi bi-backspace" aria-hidden="true"></span>
      </button>
    </td>
  `,
  name: '{{ class.name }}Edit',
  props: {
    modelValue: Object,
  },
  emits: ['update:modelValue', 'canceled', 'saved'],
  setup(props, context) {
    const editedItem = reactive({ ...props.modelValue });
    function save() {
      context.emit('update:modelValue', editedItem);
      context.emit('saved');
    }
    function cancel() {
      context.emit('canceled');
    }

    return { editedItem, save, cancel }
  },
});

app.component('{{ kebab_case class.name }}-list', {
  template: `
  <table class="table text-start">
    <thead>
      <tr class="table-light">
        {{~ for property in class.common_properties
        if !property.is_key ~}}
        <th scope="col">
          {{ property.name }}
        </th>
        {{~ end
            end ~}}
        {{~ for property in class.properties
          if property.is_collection && property.class
          ~}}
          <th scope="col">
          {{ property.name }}
          </th>
        {{~ end
          end ~}}
        <th scope="col"></th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="item in modelValue" :key="item.id">
        <{{ kebab_case class.name }}-edit v-model="item.value" @canceled="finishEditing()" @saved="finishEditing()" @show="show" v-if="editedItemId === item.id"></{{ kebab_case class.name }}-edit>
        <{{ kebab_case class.name }}-view v-model="item.value" @delete="deleteItem(item)" @edit="editItem(item)" @show="show" v-else></{{ kebab_case class.name }}-view>
      </tr>
      <tr v-if="newItem != null">
        <{{ kebab_case class.name }}-edit v-model="newItem" @canceled="cancelAdd" @saved="saveNewItem()"></{{ kebab_case class.name }}-edit>
      </tr>
      <tr>
        <button type="button" class="btn btn-sm rounded-pill m-1" @click="addNewItem()">
          <span class="bi bi-plus" aria-hidden="true"></span> Add
        </button>
      </tr>
    </tbody>
  </table>`,
  name: '{{ class.name }}List',
  props: {
    modelValue: Object
  },
  emits: ['update:modelValue', 'show'],
  setup(props, context) {
    const editedItemId = ref(-1);
    const newItem = ref(null);

    function show(name, property, obj) {
      context.emit('show', name, property, obj);
    }

    function editItem(item) {
      editedItemId.value = item.id;
    }
    function deleteItem(item) {
      if (confirm('Are you sure to delete this {{ camel_case (to_words class.name) }}?')) {
        context.emit('update:modelValue', props.modelValue.filter(i => i.id !== item.id));
      }
    }
    function finishEditing() {
      editedItemId.value = -1;
    }
    function addNewItem() {
      newItem.value = {
        {{~ for property in class.properties
            if !property.is_key && !property.is_parent_reference ~}}
        {{ camel_case property.name }}: {{ if property.is_collection }}[]{{else}}''{{end}}{{if !for.last}},{{end}}
        {{~ end
            end ~}}
      };
    }
    function saveNewItem() {
        const items = [...props.modelValue];
        const lastId = items.length == 0 ? 0 : items[items.length-1].id;
        items.push({id: lastId + 1, value: newItem.value});
        context.emit('update:modelValue', items);
        newItem.value = null;
    }
    {{~ for property in class.properties
      if property.is_collection && property.class ~}}
      function show{{ property.name }}(item) {
        context.emit('update:modelValue', item.value.{{ camel_case property.name }});
      }
    {{~ end
      end ~}}
    function cancelAdd() {
        newItem.value = null;
    }

    return { editedItemId, newItem, editItem, deleteItem, finishEditing, addNewItem, saveNewItem, cancelAdd, show};
  }
});
{{~ end ~}}

app.mount('#app');