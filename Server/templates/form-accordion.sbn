const ref = Vue.ref;
const reactive = Vue.reactive;
const watchEffect = Vue.watchEffect;
{{~ for class in classes
  if class.is_root
    root = class
    break
  end 
end ~}}
const  app = Vue.createApp({
  template: `
  {{~ for property in root.properties
  if property.class && !property.is_parent_reference
  ~}}
    <{{ kebab_case property.class.name }}{{ if property.is_collection }}-list{{ end }} v-model="{{ camel_case root.name }}.{{ camel_case property.name }}"></{{ kebab_case property.class.name }}{{ if property.is_collection }}-list{{ end }}>
{{~ end
  end ~}}
  `,
  name: 'App',
  setup: function () {
    const {{ camel_case root.name }} = ref(null);
    function saveToLocalStorage(newValue) {
        let minimized = JSON.stringify(newValue);
        let oldValue = localStorage.getItem('json');
        if (minimized != oldValue) {
          localStorage.setItem('json', minimized);
        }
    }
    function loadFromLocalStorage() {
      let json = localStorage.getItem('json');
      if (json) {
        {{ camel_case root.name }}.value = JSON.parse(json);
      }
    }
    loadFromLocalStorage();

    watchEffect(() => {
      saveToLocalStorage({{ camel_case root.name }}.value);
    });

    window.addEventListener('storage', loadFromLocalStorage);
    return { {{ camel_case root.name }}  }
  },
});
{{~ for class in classes
  if class.is_root
    continue
  end
  ~}}
app.component('{{ kebab_case class.name }}-form', {
  template: `
  <li class="list-group-item text-start" v-if="deletable">
    <button type="button" class="btn btn-sm rounded-pill" @click="$emit('delete')">
      <span class="bi bi-trash" aria-hidden="true"></span> Delete
    </button>
  </li>
  {{~ for property in class.common_properties
      if !property.is_key ~}}
  <li class="list-group-item text-start">
    <div class="col-12 d-flex justify-content-start form-floating">
      <input 
      {{~ if (get_type property) == "Date" ~}}
      type="datetime-local"
      {{~ else if (get_type property) == "number" ~}}
      type="number"
      {{~ else ~}}
      type="text"
      {{~ end ~}} 
      class="form-control"
      v-model="modelValue.{{ camel_case property.name }}"
      @input="$emit('update:modelValue', { ...modelValue, {{ camel_case property.name }}: $event.target.value })"
      placeholder="{{ to_words property.name }}">
      <label for="floatingInput">{{ to_words property.name }}</label>
    </div>
  </li>
  {{~ end
      end ~}}
  `,
  name: '{{ class.name }}Form',
  props: {
    modelValue: Object,
    deletable: Boolean
  },
  emits: ['update:modelValue', 'delete']
});

app.component('{{ kebab_case class.name }}', {
  template: `
    <div class="col-12 mb-2" :key="idx">
      <div class="card"> 
        <{{ kebab_case class.name }}-form :modelValue="modelValue" @update:modelValue="update" :deletable="deletable" @delete="$emit('delete')"></{{ kebab_case class.name }}-form>
      </div>
      {{~ for property in class.properties
        if property.class && !property.is_parent_reference ~}}
        <div class="card ms-5 mt-2">
          <div class="mt-3">
            {{~ if property.is_collection ~}}
            <{{ kebab_case property.class.name }}-list :modelValue="modelValue.{{ camel_case property.name }}" @update:modelValue="update{{ property.name }}"></{{ kebab_case property.class.name }}-list>
            {{~ else ~}}
            <{{ kebab_case property.class.name }} :modelValue="modelValue.{{ camel_case property.name }}" @update:modelValue="update{{ property.name }}" :deletable="false"></{{ kebab_case property.class.name }}>
            {{~ end ~}}
          </div>
        </div>
      {{~ end
      end ~}}
  </div>`,
  name: '{{ class.name }}',
  props: {
    modelValue: Object,
    deletable: Boolean
  },
  emits: ['update:modelValue', 'delete'],
  setup(props, context) {
    {{~ for property in class.properties
        if property.class && !property.is_parent_reference ~}}
    function update{{ property.name }}(value) {
      let newObject = {
        ...props.modelValue,
        {{ camel_case property.name }}: value
      };
      context.emit('update:modelValue', newObject);
    }
    {{~ end
      end ~}}

    function update(newValue) {
      context.emit('update:modelValue', newValue);
      editing.value = false;
    }
    return {
      {{~ for property in class.properties
        if property.class && !property.is_parent_reference ~}}
      update{{ property.name }},
      {{~ end 
      end ~}}
      update
    };
  }
});
app.component('{{ kebab_case class.name }}-list', {
  template: `
  <div class="accordion" id="{{ class.name.plural }}">
    <div class="accordion-item">
      <h2 class="accordion-header" id="{{ class.name.plural }}-headingOne">
        <button class="accordion-button" type="button" data-bs-toggle="collapse" :data-bs-target="'#'+accordionId" aria-expanded="true" :aria-controls="accordionId">
          <h5>{{ class.name.plural }}:</h5>
        </button>
      </h2>
      <!-- If {{ class.name }} has an identifier, then use it instead of idx as key! -->
      <div :id="accordionId" class="accordion-collapse collapse show" aria-labelledby="{{ class.name.plural }}-headingOne">
        <div class="accordion-body">
          <{{ kebab_case class.name }} v-for="(item, idx) in modelValue" :key="idx" :modelValue="item" @update:modelValue="updateItem(idx, $event)" :deletable="true" @delete="deleteItem(idx)" v-if="modelValue">
          </{{ kebab_case class.name }}>
          <div v-if="newItem != null">
            <div class="card">
              <{{ kebab_case class.name }}-form :modelValue="newItem" @update:modelValue="saveNewItem($event)" @canceled="cancelAdd"></{{ kebab_case class.name }}-form>
            </div>
          </div>
        </div>
      </div>
      <div class="d-flex" v-if="newItem == null">
        <button type="button" class="btn btn-sm rounded-pill m-2" @click="addNewItem()">
          <span class="bi bi-plus" aria-hidden="true"></span> Add {{ class.name }}
        </button>
      </div>
    </div>
  </div>`,
  name: '{{ class.name }}List',
  props: {
    modelValue: Array
  },
  emits: ['update:modelValue'],
  setup(props, context) {

    function deleteItem(idx) {
      if (confirm('Are you sure to delete this {{ camel_case (to_words class.name) }}?')) {
        context.emit('update:modelValue', props.modelValue.filter((item, i) => i !== idx));
      }
    }
    function updateItem(idx, item) {
      let newList = [...props.modelValue];
      newList[idx] = item;
      context.emit('update:modelValue', newList);
    }
    function addNewItem() {
      let newItem = {
        {{~ for property in class.json_properties ~}}
        {{ camel_case property.name }}: {{ get_default_value property }}{{if !for.last}},{{end}}
        {{~ end ~}}
      };
      saveNewItem(newItem);
    }
    function saveNewItem(item) {
      if (props.modelValue) {
        const items = [...props.modelValue];
        items.push(item);
        context.emit('update:modelValue', items)
      } else {
        context.emit('update:modelValue', [item])
      }
      newItem.value = null
    }

    const accordionId = randomToken();

    return {
      deleteItem,
      updateItem,
      addNewItem,
      accordionId
    };
  }
});
{{~ end ~}}

function randomToken() {
  let token = '';
  while (token.length < 8)
    token += Math.random().toString(36).substring(2);
  return `a${token.substring(0, 8)}`;
}

app.mount('#app');
