const ref = Vue.ref;
const reactive = Vue.reactive;
const watchEffect = Vue.watchEffect;
{{~ for class in classes
  if class.is_root
    root = class
    break
  end 
end ~}}
const  app = Vue.createApp({
  template: `
  <div class="d-flex breadcrumb mb-1">
    <div class="d-flex" v-for="(item, index) in breadcrumbs" :key="item">
    <h5 class="px-2 clickable" @click="sliceBreadcrumbs(index)">{{'{{'}} item.name {{'}}'}}</h5>
    <h5>/</h5>
    </div>
    <h5 class="disabled px-2">{{'{{'}} activeElement.name {{'}}'}}</h5>
    </div>
    {{~ for class in classes ~}}
    <{{ kebab_case class.name }}-list v-model="activeElement.obj[activeElement.property]" @show="show" v-if="activeElement.name == '{{ class.name.plural }}'"></{{ kebab_case class.name }}-list>
    {{~ end ~}}
  `,
  name: 'App',
  setup: function () {
    const {{ camel_case root.name }} = ref(null);
    const breadcrumbs = ref([]);
    const activeElement = ref(null);

    function show(name, property, obj) {
      if (activeElement.value)
        breadcrumbs.value.push(activeElement.value);
      activeElement.value = { name: name, property: property, obj: obj };
    }
    function sliceBreadcrumbs(idx){
      activeElement.value = breadcrumbs.value[idx];
      breadcrumbs.value = breadcrumbs.value.slice(0, idx);
    }
    function loadFromLocalStorage() {
      let json = localStorage.getItem('json');
      if (json) {
        {{ camel_case root.name }}.value = JSON.parse(json);
        {{~ for property in root.properties
        if property.is_collection && property.class ~}}
        activeElement.value = { name: '{{ property.name }}', property: '{{ camel_case property.class.name.plural }}', obj: {{ camel_case root.name }}.value };
        {{~ end
          end ~}}
      }
    }
    loadFromLocalStorage();

    window.addEventListener('storage', loadFromLocalStorage);
    return { {{ camel_case root.name }}, show, breadcrumbs, sliceBreadcrumbs, activeElement }
  },
});

app.config.globalProperties.$filters = {
  formatDatetime(date) {
    return date.replace('T', '. ').replaceAll('-', '.');
  }
};

{{~ for class in classes ~}}
app.component('{{ kebab_case class.name }}-view', {
  template: `
    {{~ for property in class.common_properties
      if !property.is_key ~}}
    <td class="align-middle">
    {{~ if (get_type property) == "Date" ~}}
      {{'{{'}} $filters.formatDatetime(value.{{ camel_case property.name }}) {{'}}'}}
    {{~ else ~}}
      {{'{{'}} value.{{ camel_case property.name }} {{'}}'}}
    {{~ end ~}}
    </td>
    {{~ end
        end ~}}
    {{~ for property in class.properties
      if property.is_collection && property.class ~}}
    <td class="align-middle">
    <button type="button" class="btn btn-sm rounded-pill" @click="$emit('show', '{{ property.name }}', '{{ camel_case property.name }}', value)">
      <span class="bi bi-eye" aria-hidden="true"></span>
      </button>
    </td>
    {{~ end
      end ~}}
  `,
  name: '{{ class.name }}View',
  props: {
    value: Object,
  },
  emits: ['show']
});

app.component('{{ kebab_case class.name }}-list', {
  template: `
  <table class="table text-start">
    <thead>
      <tr class="table-light">
        {{~ for property in class.common_properties
        if !property.is_key ~}}
        <th scope="col">
          {{ property.name }}
        </th>
        {{~ end
            end ~}}
        {{~ for property in class.properties
          if property.is_collection && property.class
          ~}}
          <th scope="col">
          {{ property.name }}
          </th>
        {{~ end
          end ~}}
      </tr>
    </thead>
    <tbody>
      <tr v-for="item in modelValue" :key="item.id">
        <{{ kebab_case class.name }}-view :value="item" @show="show"></{{ kebab_case class.name }}-view>
      </tr>
    </tbody>
  </table>`,
  name: '{{ class.name }}List',
  props: {
    modelValue: Array
  },
  emits: ['show'],
  setup(props, context) {
    function show(name, property, obj) {
      context.emit('show', name, property, obj);
    }

    return { show };
  }
});
{{~ end ~}}

app.mount('#app');