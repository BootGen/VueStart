{{~ func default_value(property)
   if ((get_type property) == "Date")
     ret "new Date().toISOString().split('.')[0]"
    end
   ret get_default_value property
end ~}}
const ref = Vue.ref;
const reactive = Vue.reactive;
const watchEffect = Vue.watchEffect;
{{~ for class in classes
  if class.is_root
    root = class
    break
  end 
end ~}}
const  app = Vue.createApp({
  template: `
  <div class="flex justify-start mb-1">
    <template v-for="(item, index) in rootBreadcrumbs" :key="item">
      <h5 v-if="activeElement.name === item.name && activeElement.component === item.component" class="text-disabled font-bold">{{'{{'}} activeElement.name {{'}}'}}</h5>
      <h5 v-else class="text-primary hover:text-primaryHover cursor-pointer font-bold" @click="sliceRootBreadcrumbs(index)">{{'{{'}} item.name {{'}}'}}</h5>
      <h5 v-if="index < rootBreadcrumbs.length-1" class="text-primary px-2 font-bold">/</h5>
    </template>
  </div>
  <component :is="activeElement.component" v-model="activeElement.obj[activeElement.property]"></component>
  `,
  name: 'App',
  setup: function () {
    const {{ camel_case root.name }} = ref(null);
    const rootBreadcrumbs = ref([]);
    const activeElement = ref(null);
    const tabIdx = ref(0);
    {{~ if input ~}}
    {{ camel_case root.name }}.value = {{input}};

    {{~ for property in root.child_references ~}}
    rootBreadcrumbs.value.push({ name: '{{ to_words property.name }}', component: '{{ kebab_case property.class.name }}{{ if property.is_collection }}-list{{ end }}', property: '{{ camel_case property.name }}', obj: {{ camel_case root.name }}.value });
    {{~ end ~}}
    function rootShow(name, component, property, obj) {
      activeElement.value = { name: name, component: component, property: property, obj: obj };
    }
    rootShow('{{ to_words root.child_references[0].name }}', '{{ kebab_case root.child_references[0].class.name }}{{ if root.child_references[0].is_collection }}-list{{ end }}', '{{ camel_case root.child_references[0].name }}', {{ camel_case root.name }}.value);
    {{~ else ~}}
    function saveToLocalStorage(newValue) {
        let minimized = JSON.stringify(newValue);
        let oldValue = localStorage.getItem('json');
        if (minimized != oldValue) {
          localStorage.setItem('json', minimized);
        }
    }
    function loadFromLocalStorage() {
      let json = localStorage.getItem('json');
      if (json) {
        {{ camel_case root.name }}.value = JSON.parse(json);
        rootBreadcrumbs.value = [];
        {{~ for property in root.child_references ~}}
        rootBreadcrumbs.value.push({ name: '{{ to_words property.name }}', component: '{{ kebab_case property.class.name }}{{ if property.is_collection }}-list{{ end }}', property: '{{ camel_case property.name }}', obj: {{ camel_case root.name }}.value });
        {{~ end ~}}
        sliceRootBreadcrumbs(tabIdx.value);
      }
    }
    loadFromLocalStorage();

    watchEffect(() => {
      saveToLocalStorage({{ camel_case root.name }}.value);
    });

    window.addEventListener('storage', loadFromLocalStorage);
    {{~ end ~}}

    function sliceRootBreadcrumbs(idx){
      activeElement.value = rootBreadcrumbs.value[idx];
      tabIdx.value = idx;
    }
    return { {{ camel_case root.name }}, tabIdx, rootBreadcrumbs, sliceRootBreadcrumbs, activeElement }
  },
});
app.config.globalProperties.$filters = {
  formatDatetime(date) {
    if (date) {
      return new Date(date).toLocaleString()
    }
    return '';
  }
};
{{~ for class in classes
      if class.is_root
        continue
      end
     ~}}
app.component('{{ kebab_case class.name }}-data', {
  template: `
  <div class="divide-y divide-gray-300 border border-solid rounded-md">
    <div class="p-2">
      <button class="bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 mr-1 rounded-full" @click="$emit('edit')">
        <i class="bi-pencil"></i> Edit
      </button>
      <button class="bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 rounded-full" @click="$emit('delete')" v-if="deletable">
        <i class="bi-trash"></i> Delete
      </button>
    </div>
    {{~ for property in class.base_properties ~}}
    <div class="flex p-2">
      <div class="w-2/5">
        {{ to_words property.name }}:
      </div>
      <div class="w-3/5">
      {{~ if (get_type property) == "Date" ~}}
        {{'{{'}} $filters.formatDatetime(value.{{ camel_case property.name }}) {{'}}'}}
      {{~ else ~}}
        {{'{{'}} value.{{ camel_case property.name }} {{'}}'}}
      {{~ end ~}}
      </div>
    </div>
    {{~ end ~}}
  </div>
  `,
  name: '{{ class.name }}Data',
  props: {
    value: Object,
    deletable: Boolean
  },
  emits: ['edit',  'delete']
});

app.component('{{ kebab_case class.name }}-form', {
  template: `
  <div class="divide-y divide-gray-300 border border-solid rounded-md">
    <div class="p-2">
      <button class="bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 mr-1 rounded-full" @click="save">
        <i class="bi-save"></i> Save
      </button>
      <button class="bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 rounded-full" @click="cancel">
        <i class="bi-backspace"></i> Cancel
      </button>
    </div>
    {{~ for property in class.base_properties ~}}
    <div class="p-2 pt-4">
      <div class="relative z-0 w-full group">
        {{~ if property.built_in_type == "Bool" ~}}
        <div class="flex align-middle">
          <input type="checkbox" v-model="editedItem.{{ camel_case property.name }}" class="ml-1 h-4 w-4 rounded border-primary focus:border-primary text-white" :checked="modelValue.{{ camel_case property.name }}">
          <label class="ml-3 text-sm font-medium">{{ to_words property.name }}</label>
        </div>
        {{~ else ~}}
        <input class="block py-1.5 px-0 w-full text-sm bg-transparent border-0 border-b-1 border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-primary peer"
        {{~ if property.built_in_type == "DateTime" ~}}
        type="datetime-local"
        step="60"
        {{~ else if property.built_in_type == "Int" ~}}
        type="number"
        {{~ else if property.built_in_type == "Float" ~}}
        type="number"
        step="0.1"
        {{~ else ~}}
        type="text"
        {{~ end ~}}
        v-model="editedItem.{{ camel_case property.name }}"
        placeholder=" " />
        <label class="absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:text-primary peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">{{ to_words property.name }}</label>
        {{~ end ~}}
      </div>
    </div>
    {{~ end ~}}
  </div>
  `,
  name: '{{ class.name }}Form',
  props: {
    modelValue: Object,
  },
  emits: ['update:modelValue', 'canceled'],
  setup(props, context) {
    const editedItem = { ...props.modelValue };

    function save() {
      context.emit('update:modelValue', editedItem);
    }
    
    function cancel() {
      context.emit('canceled');
    }

    return { editedItem, save, cancel }
  },
});

app.component('{{ kebab_case class.name }}', {
  template: `
  <div class="mb-2" v-if="modelValue">
    <div class="w-full rounded overflow-hidden mb-2 text-left">
      <{{ kebab_case class.name }}-form :modelValue="modelValue" @update:modelValue="update" @canceled="editing = false" v-if="editing"></{{ kebab_case class.name }}-form>
      <{{ kebab_case class.name }}-data :value="modelValue" @edit="editing = true" :deletable="deletable" @delete="$emit('delete')" v-else></{{ kebab_case class.name }}-data>
    </div>
    {{~ for property in class.child_references ~}}
      <div class="rounded overflow-hidden ml-6 mb-2 text-left">
        <h5 class="text-primary font-bold">{{ to_words property.name }}:</h5>
        {{~ if property.is_collection ~}}
        <{{ kebab_case property.class.name }}-list :modelValue="modelValue.{{ camel_case property.name }}" @update:modelValue="update{{ property.name }}"></{{ kebab_case property.class.name }}-list>
        {{~ else ~}}
        <{{ kebab_case property.class.name }} :modelValue="modelValue.{{ camel_case property.name }}" @update:modelValue="update{{ property.name }}" :deletable="false" ></{{ kebab_case property.class.name }}>
        {{~ end ~}}
      </div>
    {{~ end ~}}
  </div>
  <div class="mb-2" v-else>
    <button class="bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 rounded-full" @click="$emit('update:modelValue', {})">
      <i class="bi-plus"></i> Add {{ to_words class.name }}
    </button>
  </div>`,
  name: '{{ class.name }}',
  props: {
    modelValue: Object,
    deletable: Boolean
  },
  emits: ['update:modelValue', 'delete'],
  setup(props, context) {
    const editing = ref(false);
    {{~ for property in class.child_references ~}}
    function update{{ property.name }}(value) {
      let newObject = {
        ...props.modelValue,
        {{ camel_case property.name }}: value
      };
      context.emit('update:modelValue', newObject);
    }
    {{~ end ~}}

    function update(newValue) {
      context.emit('update:modelValue', newValue);
      editing.value = false;
    }
    return {
      {{~ for property in class.child_references ~}}
      update{{ property.name }},
      {{~ end ~}}
      editing,
      update
    };
  }
});

app.component('{{ kebab_case class.name }}-list', {
  template: `
  <!-- If {{ class.name }} has an identifier, then use it instead of idx as key! -->
  <{{ kebab_case class.name }} v-for="(item, idx) in modelValue" :key="idx" :modelValue="item" @update:modelValue="updateItem(idx, $event)" :deletable="true" @delete="deleteItem(idx)" v-if="modelValue"></{{ kebab_case class.name }}>
  <button class="flex bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 rounded-full" @click="addNewItem" v-if="newItem == null">
    <i class="bi-plus"></i> Add {{ to_words class.name }}
  </button>
  <div class="w-full rounded overflow-hidden mb-2 text-left" v-if="newItem != null">
    <{{ kebab_case class.name }}-form :modelValue="newItem" @update:modelValue="saveNewItem($event)" @canceled="cancelAdd"></{{ kebab_case class.name }}-form>
  </div>`,
  name: '{{ class.name }}List',
  props: {
    modelValue: Array
  },
  emits: ['update:modelValue'],
  setup(props, context) {
    const newItem = ref(null);

    function deleteItem(idx) {
      if (confirm('Are you sure to delete this {{ camel_case (to_words class.name) }}?')) {
        context.emit('update:modelValue', props.modelValue.filter((item, i) => i !== idx));
      }
    }
    function updateItem(idx, item) {
      let newList = [...props.modelValue];
      newList[idx] = item;
      context.emit('update:modelValue', newList);
    }
    function addNewItem() {
      newItem.value = {
        {{~ for property in class.json_properties ~}}
        {{ camel_case property.name }}: {{ default_value property }}{{if !for.last}},{{end}}
        {{~ end ~}}
      };
    }
    function saveNewItem(item) {
      if (props.modelValue) {
        const items = [...props.modelValue];
        items.push(item);
        context.emit('update:modelValue', items)
      } else {
        context.emit('update:modelValue', [item])
      }
      newItem.value = null
    }
    function cancelAdd() {
        newItem.value = null;
    }

    return {
      newItem,
      deleteItem,
      updateItem,
      addNewItem,
      saveNewItem,
      cancelAdd
    };
  }
});
{{~ end ~}}

app.mount('#app');
