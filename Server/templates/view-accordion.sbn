const ref = Vue.ref;
const reactive = Vue.reactive;
const watchEffect = Vue.watchEffect;
{{~ for class in classes
  if class.is_root
    root = class
    break
  end 
end ~}}
const  app = Vue.createApp({
  template: `
  {{~ for property in root.properties
  if property.class && !property.is_parent_reference
  ~}}
    <{{ kebab_case property.class.name }}{{ if property.is_collection }}-list{{ end }} v-model="{{ camel_case root.name }}.{{ camel_case property.name }}"></{{ kebab_case property.class.name }}{{ if property.is_collection }}-list{{ end }}>
{{~ end
  end ~}}
  `,
  name: 'App',
  setup: function () {
    const {{ camel_case root.name }} = ref(null);

    function loadFromLocalStorage() {
      let json = localStorage.getItem('json');
      if (json) {
        {{ camel_case root.name }}.value = JSON.parse(json);
      }
    }

    loadFromLocalStorage();

    window.addEventListener('storage', loadFromLocalStorage);
    return { {{ camel_case root.name }}  }
  },
});
app.config.globalProperties.$filters = {
  formatDatetime(date) {
    if (date) {
      return new Date(date).toLocaleString()
    }
    return '';
  }
};
{{~ for class in classes
  if class.is_root
    continue
  end
  ~}}
app.component('{{ kebab_case class.name }}-data', {
  template: `
  {{~ for property in class.common_properties
  if !property.is_key ~}}
  <li class="list-group-item text-start">
    <div class="row">
      <div class="col-4 d-flex justify-content-start text-break text-start">
        {{ to_words property.name }}:
      </div>
      <div class="col-8 d-flex justify-content-start text-break">
      {{~ if (get_type property) == "Date" ~}}
        {{'{{'}} $filters.formatDatetime(value.{{ camel_case property.name }}) {{'}}'}}
      {{~ else ~}}
        {{'{{'}} value.{{ camel_case property.name }} {{'}}'}}
      {{~ end ~}}
      </div>
    </div>
  </li>
  {{~ end
      end ~}}
  `,
  name: '{{ class.name }}View',
  props: {
    value: Object,
  }
});

app.component('{{ kebab_case class.name }}', {
  template: `
    <div class="col-12 mb-2" :key="idx">
      <div class="card">
        <{{ kebab_case class.name }}-data :value="modelValue"></{{ kebab_case class.name }}-data>
      </div>
      {{~ for property in class.properties
        if property.class && !property.is_parent_reference ~}}
        <div class="card ms-5 mt-2">
          <div class="mt-3">
            {{~ if property.is_collection ~}}
            <{{ kebab_case property.class.name }}-list :modelValue="modelValue.{{ camel_case property.name }}"></{{ kebab_case property.class.name }}-list>
            {{~ else ~}}
            <{{ kebab_case property.class.name }} :modelValue="modelValue.{{ camel_case property.name }}"></{{ kebab_case property.class.name }}>
            {{~ end ~}}
          </div>
        </div>
      {{~ end
      end ~}}
  </div>`,
  name: '{{ class.name }}',
  props: {
    modelValue: Object
  }
});
app.component('{{ kebab_case class.name }}-list', {
  template: `
  <div class="accordion" id="{{ class.name.plural }}">
    <div class="accordion-item">
      <h2 class="accordion-header" id="{{ class.name.plural }}-headingOne">
        <button class="accordion-button" type="button" data-bs-toggle="collapse" :data-bs-target="'#'+accordionId" aria-expanded="true" :aria-controls="accordionId">
          <h5>{{ class.name.plural }}:</h5>
        </button>
      </h2>
      <!-- If {{ class.name }} has an identifier, then use it instead of idx as key! -->
      <div :id="accordionId" class="accordion-collapse collapse show" aria-labelledby="{{ class.name.plural }}-headingOne">
        <div class="accordion-body">
          <{{ kebab_case class.name }} v-for="(item, idx) in modelValue" :key="idx" :modelValue="item" v-if="modelValue">
          </{{ kebab_case class.name }}>
        </div>
      </div>
    </div>
  </div>`,
  name: '{{ class.name }}List',
  props: {
    modelValue: Array
  },
  setup() {
    const accordionId = randomToken();

    return { accordionId };
  }
});
{{~ end ~}}

function randomToken() {
  let token = '';
  while (token.length < 8)
    token += Math.random().toString(36).substring(2);
  return `a${token.substring(0, 8)}`;
}
app.mount('#app');
