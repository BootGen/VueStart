const ref = Vue.ref;
const reactive = Vue.reactive;
const watchEffect = Vue.watchEffect;
{{~ for class in classes
  if class.is_root
    root = class
    break
  end 
end ~}}
const  app = Vue.createApp({
  template: `
    {{~ for property in root.properties
      if property.is_collection && property.class
      ~}}
    <{{ kebab_case property.class.name }}-list v-model="{{ camel_case root.name }}.{{ camel_case property.class.name.plural }}"></{{ kebab_case property.class.name }}-list>
    {{~ end
      end ~}}
  `,
  name: 'App',
  setup: function () {
    const {{ camel_case root.name }} = ref(null);

    function loadFromLocalStorage() {
      let json = localStorage.getItem('json');
      if (json) {
        {{ camel_case root.name }}.value = JSON.parse(json);
      }
    }

    loadFromLocalStorage();

    window.addEventListener('storage', loadFromLocalStorage);
    return { {{ camel_case root.name }}  }
  },
});

app.config.globalProperties.$filters = {
  formatDatetime(date) {
    return date.replace('T', '. ').replaceAll('-', '.');
  }
};

{{~ for class in classes ~}}
app.component('{{ kebab_case class.name }}-view', {
  template: `
  {{~ for property in class.common_properties
  if !property.is_key ~}}
  <li class="list-group-item">
    <div class="row">
      <div class="col-4 d-flex justify-content-start text-break text-start">
        {{ property.name }}:
      </div>
      <div class="col-8 d-flex justify-content-start text-break">
      {{~ if (get_type property) == "Date" ~}}
        {{'{{'}} $filters.formatDatetime(value.{{ camel_case property.name }}) {{'}}'}}
      {{~ else ~}}
        {{'{{'}} value.{{ camel_case property.name }} {{'}}'}}
      {{~ end ~}}
      </div>
    </div>
  </li>
  {{~ end
      end ~}}
  `,
  name: '{{ class.name }}View',
  props: {
    value: Object,
  }
});

app.component('{{ kebab_case class.name }}-list', {
  template: `
  <div class="accordion" id="{{ class.name.plural }}">
    <div class="accordion-item">
      <h2 class="accordion-header" id="{{ class.name.plural }}-headingOne">
        <button class="accordion-button" type="button" data-bs-toggle="collapse" :data-bs-target="'#'+accordionId+'-collapseOne'" aria-expanded="true" :aria-controls="accordionId+'-collapseOne'">
          <h5>{{ class.name.plural }}:</h5>
        </button>
      </h2>
      <!-- If {{ class.name }} has an identifier, then use it instead of idx as key! -->
      <div :id="accordionId+'-collapseOne'" class="accordion-collapse collapse show" aria-labelledby="{{ class.name.plural }}-headingOne" v-for="(item, idx) in modelValue" :key="idx">
        <div class="accordion-body">
          <div>
            <{{ kebab_case class.name }}-view :value="item"></{{ kebab_case class.name }}-view>
          </div>
          {{~ for property in class.properties
            if property.is_collection && property.class ~}}
            <div class="ms-5 mt-2">
              <{{ kebab_case property.class.name }}-list :modelValue="item.{{ camel_case property.class.name.plural }}"></{{ kebab_case property.class.name }}-list>
            </div>
          {{~ end
          end ~}}
        </div>
      </div>
    </div>
  </div>`,
  name: '{{ class.name }}List',
  props: {
    modelValue: Array
  },
  setup() {
    const accordionId = randomToken();

    return { accordionId };
  }
});
{{~ end ~}}

function randomToken() {
  let token = '';
  while (token.length < 16)
    token += Math.random().toString(36).substring(2);
  return token.substring(0, 16);
}

app.mount('#app');