{{~ func default_value(property)
   if ((get_type property) == "Date")
     ret "new Date().toISOString().split('.')[0]"
    end
   ret get_default_value property
end ~}}
const ref = Vue.ref;
const watchEffect = Vue.watchEffect;
const watch = Vue.watch;
{{~ for class in classes
  if class.is_root
    root = class
    break
  end 
end ~}}
const  app = Vue.createApp({
  template: `
  {{~ for property in root.child_references ~}}
  {{~ if property.is_collection ~}}
  <{{ kebab_case property.class.name }}-list v-model="{{ camel_case root.name }}.{{ camel_case property.name }}"></{{ kebab_case property.class.name }}-list>
  {{~ else ~}}
  <{{ kebab_case property.class.name }} v-model="{{ camel_case root.name }}.{{ camel_case property.name }}"></{{ kebab_case property.class.name }}>
  {{~ end ~}}
  {{~ end ~}}
  `,
  name: 'App',
  setup: function () {
    const {{ camel_case root.name }} = ref(null);
    {{~ if input ~}}
    {{ camel_case root.name }}.value = {{input}};
    {{~ else ~}}
    function saveToLocalStorage(newValue) {
        let minimized = JSON.stringify(newValue);
        let oldValue = localStorage.getItem('json');
        if (minimized != oldValue) {
          localStorage.setItem('json', minimized);
        }
    }
    function loadFromLocalStorage() {
      let json = localStorage.getItem('json');
      if (json && json !== JSON.stringify({{ camel_case root.name }}.value)) {
          {{ camel_case root.name }}.value = JSON.parse(json);
      }
    }
    loadFromLocalStorage();

    watchEffect(() => {
      saveToLocalStorage({{ camel_case root.name }}.value);
    });

    window.addEventListener('storage', loadFromLocalStorage);
    {{~ end ~}}
    return { {{ camel_case root.name }} }
  },
});

app.config.globalProperties.$filters = {
  formatDatetime(date) {
    if (date) {
      return new Date(date).toLocaleString()
    }
    return '';
  }
};

{{~ for class in classes
      if class.is_root
        continue
      end ~}}
app.component('{{ kebab_case class.name }}-data', {
  template: `
  {{~ for property in class.base_properties ~}}
  <td>
  {{~ if (get_type property) == "Date" ~}}
    {{'{{'}} $filters.formatDatetime(value.{{ camel_case property.name }}) {{'}}'}}
  {{~ else ~}}
    {{'{{'}} value.{{ camel_case property.name }} {{'}}'}}
  {{~ end ~}}
  </td>
  {{~ end ~}}
  {{~ for property in class.child_references ~}}
  <td>
    <button type="button" class="btn" @click="$emit('show', '{{ camel_case property.name }}')">
      <i class="bi-eye"></i>
    </button>
  </td>
  {{~ end ~}}
  <td>
    <button type="button" class="btn" @click="$emit('edit')">
      <i class="bi-pencil"></i>
    </button>
    <button type="button" class="btn" @click="$emit('delete')" v-if="deletable">
      <i class="bi-trash"></i>
    </button>
  </td>
  `,
  name: '{{ class.name }}View',
  props: {
    value: Object,
    deletable: Boolean
  },
  emits: ['edit',  'delete', 'show']
});

app.component('{{ kebab_case class.name }}-form', {
  template: `
  {{~ for property in class.base_properties ~}}
  <td>
    <div class="field">
      {{~ if property.built_in_type == "Bool" ~}}
      <label>
      <input class="check-input" type="checkbox" 
      v-model="editedItem.{{ camel_case property.name }}">
      {{ to_words property.name }}
      </label>
      {{~ else ~}}
      <input
      {{~ if property.built_in_type == "DateTime" ~}}
      type="datetime-local"
      step="60"
      {{~ else if property.built_in_type == "Int" ~}}
      type="number"
      {{~ else if property.built_in_type == "Float" ~}}
      type="number"
      step="0.1"
      {{~ else ~}}
      type="text"
      {{~ end ~}}
      v-model="editedItem.{{ camel_case property.name }}"
      placeholder="{{ to_words property.name }}">
      {{~ end ~}}
    </div>
  </td>
  {{~ end ~}}
  {{~ for property in class.child_references ~}}
  <td>
    <button type="button" class="btn" @click="$emit('show', '{{ camel_case property.name }}')">
      <i class="bi-eye"></i>
    </button>
  </td>
  {{~ end ~}}
  <td>
    <button type="button" class="btn" @click="save">
      <i class="bi-save"></i>
    </button>
    <button type="button" class="btn" @click="cancel">
      <i class="bi-backspace"></i>
    </button>
  </td>
  `,
  name: '{{ class.name }}Form',
  props: {
    modelValue: Object
  },
  emits: ['update:modelValue', 'canceled'],
  setup(props, context) {
    const editedItem = { ...props.modelValue };
    function save() {
      context.emit('update:modelValue', editedItem);
    }
    function cancel() {
      context.emit('canceled');
    }

    return { editedItem, save, cancel }
  },
});

app.component('{{ kebab_case class.name }}-row', {
  template: `
  <tr :class="{'active-row': editing}">
    <{{ kebab_case class.name }}-form :modelValue="modelValue" @update:modelValue="update" @canceled="editing = false" @show="show" v-if="editing"></{{ kebab_case class.name }}-form>
    <{{ kebab_case class.name }}-data :value="modelValue" :deletable="deletable" @delete="$emit('delete')" @edit="editing = true" @show="show" v-else></{{ kebab_case class.name }}-data>
  </tr>
  `,
  name: '{{ class.name }}Row',
  props: {
    modelValue: Object,
    deletable: Boolean
  },
  emits: ['update:modelValue', 'delete', 'show'],
  setup(props, context) {
    const editing = ref(false);

    function update(newValue) {
      context.emit('update:modelValue', newValue);
      editing.value = false;
    }

    function show(property) {
      context.emit('show', property);
    }
    return { editing, update, show }
  }
});

app.component('{{ kebab_case class.name }}-table', {
  template: `
  <table class="table">
    <thead>
      <tr>
        {{~ for property in class.base_properties ~}}
        <th scope="col">
          {{ to_words property.name }}
        </th>
        {{~ end ~}}
        {{~ for property in class.child_references
          ~}}
          <th scope="col">
          {{ to_words property.name }}
          </th>
        {{~ end ~}}
        <th scope="col"></th>
      </tr>
    </thead>
    <tbody>
      <slot></slot>
    </tbody>
  </table>`,
  name: '{{ class.name }}Table',
  props: {
    modelValue: Array
  }
});

app.component('{{ kebab_case class.name }}', {
  template: `
  <h5 class="disabled"  v-if="activeProperty === null">{{ class.name.plural }}</h5>
  <h5 class="clickable" @click="activeProperty = null" v-if="activeProperty !== null">{{ class.name.plural }}</h5>
  <h5 class="breadcrumb-separator" v-if="activeProperty !== null">/</h5>
  <{{ kebab_case class.name }}-table v-if="activeProperty === null">
    <{{ kebab_case class.name }}-row :modelValue="modelValue" @update:modelValue="update" :deletable="false" @show="show" v-if="modelValue"></{{ kebab_case class.name }}-row>
    <tr v-else>
      <button type="button" class="btn" @click="$emit('update:modelValue', {})">
        <i class="bi-plus"></i> Add
      </button>
    </tr>
  </{{ kebab_case class.name }}-table>
  {{~ for property in class.child_references ~}}
      {{~ if property.is_collection ~}}
      <{{ kebab_case property.class.name }}-list :modelValue="modelValue[activeProperty]" @update:modelValue="updateChild" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name }}-list>
      {{~ else ~}}
      <{{ kebab_case property.class.name }} :modelValue="modelValue[activeProperty]" @update:modelValue="updateChild" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name }}>
      {{~ end ~}}
  {{~ end ~}}`,
  name: '{{ class.name }}',
  props: {
    modelValue: Object
  },
  emits: ['update:modelValue', 'show'],
  setup(props, context) {
    const activeProperty = ref(null);
    function update(newValue) {
      context.emit('update:modelValue', newValue);
    }
    function show(property) {
      activeProperty.value = property;
    }

    function updateChild(newValue) {
      let newObj = {...props.modelValue};
      newObj[activeProperty.value] = newValue;
      context.emit('update:modelValue', newObj);
    }

    return { update, show, activeProperty, updateChild }
  }
});

app.component('{{ kebab_case class.name }}-list', {
  template: `
  <h5 class="disabled"  v-if="activeProperty === null">{{ class.name.plural }}</h5>
  <h5 class="clickable" @click="activeProperty = null" v-if="activeProperty !== null">{{ class.name.plural }}</h5>
  <h5 class="breadcrumb-separator" v-if="activeProperty !== null">/</h5>
  <{{ kebab_case class.name }}-table v-if="activeProperty === null">
    <!-- If {{ class.name }} has an identifier, then use it instead of idx as key! -->
    <{{ kebab_case class.name }}-row v-for="(item, idx) in modelValue" :key="idx" :modelValue="item" @update:modelValue="updateItem(idx, $event)" @delete="deleteItem(idx)" :deletable="true" @show="show(idx, $event)" v-if="modelValue"></{{ kebab_case class.name }}-row>
    <tr v-if="newItem">
      <{{ kebab_case class.name }}-form :modelValue="newItem" @update:modelValue="saveNewItem" @canceled="cancelAdd"></{{ kebab_case class.name }}-form>
    </tr>
    <tr v-else>
      <td class="new-item-button">
        <button type="button" class="btn" @click="addNewItem">
          <i class="bi-plus"></i> Add
        </button>
      <td/>
    </tr>
  </{{ kebab_case class.name }}-table>
  {{~ for property in class.child_references ~}}
      {{~ if property.is_collection ~}}
      <{{ kebab_case property.class.name }}-list :modelValue="modelValue[activeIdx][activeProperty]" @update:modelValue="updateChild" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name }}-list>
      {{~ else ~}}
      <{{ kebab_case property.class.name }} :modelValue="modelValue[activeIdx][activeProperty]" @update:modelValue="updateChild" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name }}>
      {{~ end ~}}
  {{~ end ~}}`,
  name: '{{ class.name }}List',
  props: {
    modelValue: Array
  },
  emits: ['update:modelValue', 'show'],
  setup(props, context) {
    const newItem = ref(null);
    const activeProperty = ref(null);
    const activeIdx = ref(null);

    function show(idx, property) {
      activeIdx.value = idx;
      activeProperty.value = property;
    }

    function updateChild(newValue) {
      let newList = [...props.modelValue];
      newList[activeIdx.value] = { ...newList[activeIdx.value] };
      newList[activeIdx.value][activeProperty.value] = newValue;
      context.emit('update:modelValue', newList);
    }

    function deleteItem(idx) {
      if (confirm('Are you sure to delete this {{ camel_case (to_words class.name) }}?')) {
        context.emit('update:modelValue', props.modelValue.filter((item, i) => i !== idx));
      }
    }
    function updateItem(idx, item) {
      let newList = [...props.modelValue];
      newList[idx] = item;
      context.emit('update:modelValue', newList);
    }
    function addNewItem() {
      newItem.value = {
        {{~ for property in class.json_properties ~}}
        {{ camel_case property.name }}: {{ default_value property }}{{if !for.last}},{{end}}
        {{~ end ~}}
      };
    }
    function saveNewItem(item) {
      if (props.modelValue) {
        const items = [...props.modelValue];
        items.push(item);
        context.emit('update:modelValue', items)
      } else {
        context.emit('update:modelValue', [item])
      }
      newItem.value = null
    }
    function cancelAdd() {
      newItem.value = null;
    }

    return {
      newItem,
      deleteItem,
      updateItem,
      addNewItem,
      saveNewItem,
      cancelAdd,
      show,
      activeIdx,
      activeProperty,
      updateChild
    };
  }
});
{{~ end ~}}

app.mount('#app');
