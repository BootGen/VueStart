{{~ func default_value(property)
   if ((get_type property) == "Date")
     ret "new Date().toISOString().split('.')[0]"
    end
   ret get_default_value property
end ~}}
const ref = Vue.ref;
const watchEffect = Vue.watchEffect;
const watch = Vue.watch;
const computed = Vue.computed;
{{~ for class in classes
  if class.is_root
    root = class
    break
  end 
end ~}}
const app = Vue.createApp({
  template: `
  {{~ for property in root.child_references ~}}
  {{~ if property.is_collection ~}}
  <{{ kebab_case property.class.name.plural }} v-model="{{ camel_case root.name }}.{{ camel_case property.name }}"></{{ kebab_case property.class.name.plural }}>
  {{~ else ~}}
  <{{ kebab_case property.class.name }} v-model="{{ camel_case root.name }}.{{ camel_case property.name }}"></{{ kebab_case property.class.name }}>
  {{~ end ~}}
  {{~ end ~}}
  `,
  name: 'App',
  setup: function () {
    const {{ camel_case root.name }} = ref(null);
    {{~ if input ~}}
    {{ camel_case root.name }}.value = {{input}};
    {{~ else ~}}
    function saveToLocalStorage(newValue) {
        let minimized = JSON.stringify(newValue);
        let oldValue = localStorage.getItem('{{ generated_id }}');
        if (minimized != oldValue) {
          localStorage.setItem('{{ generated_id }}', minimized);
        }
    }
    function loadFromLocalStorage() {
      let json = localStorage.getItem('{{ generated_id }}');
      if (json && json !== JSON.stringify({{ camel_case root.name }}.value)) {
        {{ camel_case root.name }}.value = JSON.parse(json);
      }
    }
    loadFromLocalStorage();

    watchEffect(() => {
      saveToLocalStorage({{ camel_case root.name }}.value);
    });

    window.addEventListener('storage', loadFromLocalStorage);
    {{~ end ~}}
    return { {{ camel_case root.name }} }
  },
});

app.config.globalProperties.$filters = {
  formatDatetime(date) {
    if (date) {
      return new Date(date).toLocaleString()
    }
    return '';
  }
};

app.component('pagination', {
  template: `
  <nav aria-label="Page navigation">
    <ul class="inline-flex items-center -space-x-px">
      <li>
        <a href="javascript:void(0)" class="block py-2 px-3 ml-0 leading-tight text-gray-500 bg-white rounded-l-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700" @click="toPage(pageIdx-1)">
          <span class="sr-only">Previous</span>
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path>
          </svg>
        </a>
      </li>
      <li v-for="n in pageCount" @click="toPage(n)">
        <a href="javascript:void(0)" class="block py-2 px-3 leading-tight bg-white border border-gray-300 hover:bg-gray-100" :class="{'text-primary': n === pageIdx, 'text-gray-500 hover:text-gray-700': n !== pageIdx }">{{'{{'}} n {{'}}'}}</a>
      </li>
      <li>
        <a href="javascript:void(0)" class="block py-2 px-3 leading-tight text-gray-500 bg-white rounded-r-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700" @click="toPage(pageIdx+1)">
          <span class="sr-only">Next</span>
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
        </a>
      </li>
    </ul>
  </nav>
  <p>
    rows per page:
    <select v-model="pageSize">
      <option>5</option>
      <option>10</option>
      <option>20</option>
      <option>50</option>
    </select>
  </p>
  `,
  name: 'Pagination',
  props: {
    count: Number,
  },
  emits:['range'],
  setup(props, context) {
    const pageIdx = ref(0);
    const pageSize = ref(5);
    const pageCount = computed(() => Math.ceil(props.count / pageSize.value));
    watch(pageCount, function() {
      toPage(1)
    });
    function toPage(idx) {
      if (idx < 1 || idx > pageCount.value) {
        return
      }
      pageIdx.value = idx;
      context.emit('range', (idx - 1) * pageSize.value, idx * pageSize.value)
    }
    toPage(1);
    return { pageCount, pageIdx, pageSize, toPage }
  }
});

app.component('search', {
  template: `
  <div class="flex justify-center">
    <div class="mb-3 xl:w-96">
      <input
        type="search"
        v-model="searchText" @input="$emit('update', searchText)"
        class="
          form-control
          block
          w-full
          px-3
          py-1.5
          text-gray-700
          border border-solid border-gray-300
          rounded
          m-0
          focus:text-gray-700 focus:bg-white focus:border-primary focus:outline-none
        "
        placeholder="Search..."
      />
    </div>
  </div>
  `,
  name: 'Search',
  props: {
    value: String,
  },
  emits:['update'],
  setup(props, context) {
    const searchText = ref(props.value);
    return { searchText }
  }
});

{{~ for class in classes
      if class.is_root
        continue
      end ~}}
app.component('{{ kebab_case class.name }}-data', {
  template: `
  {{~ for property in class.base_properties ~}}
  <td class="border-b border-slate-100 p-4 text-slate-500 text-left">
  {{~ if (get_type property) == "Date" ~}}
    {{'{{'}} $filters.formatDatetime(value.{{ camel_case property.name }}) {{'}}'}}
  {{~ else ~}}
    {{'{{'}} value.{{ camel_case property.name }} {{'}}'}}
  {{~ end ~}}
  </td>
  {{~ end ~}}
  {{~ for property in class.child_references ~}}
  <td class="border-b border-slate-100 p-4 text-slate-500 text-left">
    <button class="bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 rounded-full" @click="$emit('show', '{{ camel_case property.name }}')">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1">
      <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
      <path stroke-linecap="round" stroke-linejoin="round" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
    </svg>
    </button>
  </td>
  {{~ end ~}}
  <td class="border-b border-slate-100 p-4 text-slate-500 text-right">
    <button class="bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 mr-1 rounded-full" @click="$emit('edit')">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1">
        <path stroke-linecap="round" stroke-linejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
      </svg>
    </button>
    <button class="bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 rounded-full" @click="$emit('delete')" v-if="deletable">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1">
        <path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
      </svg>
    </button>
  </td>
  `,
  name: '{{ class.name }}Data',
  props: {
    value: Object,
    deletable: Boolean
  },
  emits: ['edit', 'delete'{{ if class.has_child }}, 'show'{{ end }}]
});

app.component('{{ kebab_case class.name }}-form', {
  template: `
  {{~ for property in class.base_properties ~}}
  <td class="border-b border-slate-100 p-4 text-slate-500 text-left">
    <div class="relative z-0 w-full group">
      {{~ if property.built_in_type == "Bool" ~}}
      <div class="flex align-middle">
        <input type="checkbox" v-model="editedItem.{{ camel_case property.name }}" class="ml-1 h-4 w-4 rounded border-primary focus:border-primary text-white" :checked="modelValue.{{ camel_case property.name }}">
        <label class="ml-3 text-sm font-medium">{{ to_words property.name }}</label>
      </div>
      {{~ else ~}}
      <input class="block py-1.5 px-0 w-full text-sm bg-transparent border-0 border-b-1 border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-primary peer"
      {{~ if property.built_in_type == "DateTime" ~}}
      type="datetime-local"
      step="60"
      {{~ else if property.built_in_type == "Int" ~}}
      type="number"
      {{~ else if property.built_in_type == "Float" ~}}
      type="number"
      step="0.1"
      {{~ else ~}}
      type="text"
      {{~ end ~}}
      v-model="editedItem.{{ camel_case property.name }}"
      placeholder=" " />
      <label class="absolute text-sm text-gray-500 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:text-primary peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">{{ to_words property.name }}</label>
      {{~ end ~}}
    </div>
  </td>
  {{~ end ~}}
  {{~ for property in class.child_references ~}}
  <td class="border-b border-slate-100 p-4 text-slate-500 text-left">
    <button class="bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 rounded-full" @click="$emit('show', '{{ camel_case property.name }}')">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1">
        <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
        <path stroke-linecap="round" stroke-linejoin="round" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
      </svg>
    </button>
  </td>
  {{~ end ~}}
  <td class="border-b border-slate-100 p-4 text-slate-500 text-right">
    <button class="bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 mr-1 rounded-full" @click="save">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1">
        <path stroke-linecap="round" stroke-linejoin="round" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
      </svg>
    </button>
    <button class="bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 rounded-full" @click="cancel">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1">
        <path stroke-linecap="round" stroke-linejoin="round" d="M12 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2M3 12l6.414 6.414a2 2 0 001.414.586H19a2 2 0 002-2V7a2 2 0 00-2-2h-8.172a2 2 0 00-1.414.586L3 12z" />
      </svg>
    </button>
  </td>
  `,
  name: '{{ class.name }}Form',
  props: {
    modelValue: Object
  },
  emits: ['update:modelValue', 'canceled'],
  setup(props, context) {
    const editedItem = { ...props.modelValue };
    function save() {
      context.emit('update:modelValue', editedItem);
    }
    function cancel() {
      context.emit('canceled');
    }

    return { editedItem, save, cancel }
  },
});

app.component('{{ kebab_case class.name }}-row', {
  template: `
  <tr :class="{'bg-primaryActive': editing}">
  <{{ kebab_case class.name }}-form :modelValue="modelValue" @update:modelValue="update" @canceled="editing = false"{{ if class.has_child }} @show="show"{{ end }} v-if="editing"></{{ kebab_case class.name }}-form>
  <{{ kebab_case class.name }}-data :value="modelValue" :deletable="deletable" @delete="$emit('delete')" @edit="editing = true"{{ if class.has_child }} @show="show"{{ end }} v-else></{{ kebab_case class.name }}-data>
  </tr>
  `,
  name: '{{ class.name }}Row',
  props: {
    modelValue: Object,
    deletable: Boolean
  },
  emits: ['update:modelValue', 'delete'{{ if class.has_child }}, 'show'{{ end }}],
  setup(props, context) {
    const editing = ref(false);

    function update(newValue) {
      context.emit('update:modelValue', newValue);
      editing.value = false;
    }
    {{~ if class.has_child ~}}
    function show(property) {
      context.emit('show', property);
    }
    {{~ end ~}}
    return { editing, update{{ if class.has_child }}, show{{ end }} }
  }
});

app.component('{{ kebab_case class.name }}-table', {
  template: `
  <table class="border-collapse table-auto w-full mt-2 mb-6">
    <thead>
      <tr>
        {{~ for property in class.base_properties ~}}
        <th class="group cursor-pointer border-b font-medium p-4 pt-0 pb-3 text-left" @click="sort('{{ camel_case property.name }}')" v-if="sortable">
          {{ to_words property.name }}
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block invisible group-hover:visible group-hover:opacity-40" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1" v-if="orderBy !== '{{ camel_case property.name }}' && orderAsc">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5 15l7-7 7 7" />
          </svg>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block invisible group-hover:visible group-hover:opacity-40" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1" v-if="orderBy !== '{{ camel_case property.name }}' && !orderAsc">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
          </svg>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1" v-if="orderBy === '{{ camel_case property.name }}' && orderAsc">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5 15l7-7 7 7" />
          </svg>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1" v-if="orderBy === '{{ camel_case property.name }}' && !orderAsc">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
          </svg>
        </th>
        <th class="border-b font-medium p-4 pt-0 pb-3 text-left" v-else>
          {{ to_words property.name }}
        </th>
        {{~ end ~}}
        {{~ for property in class.child_references ~}}
        <th class="border-b font-medium p-4 pt-0 pb-3 text-left">
        {{ to_words property.name }}
        </th>
        {{~ end ~}}
        <th class="border-b font-medium p-4 pt-0 pb-3 text-left"></th>
      </tr>
    </thead>
    <tbody>
      <slot></slot>
    </tbody>
  </table>`,
  name: '{{ class.name }}Table',
  props: {
    modelValue: Array,
    sortable: Boolean
  },
  emits: ['sort'],
  setup(props, context) {
    const orderBy = ref('');
    const orderAsc = ref(true);
    function sort(propName) {
      if (orderBy.value === propName) {
        orderAsc.value = !orderAsc.value
      } else {
        orderBy.value = propName
      }
      context.emit('sort', orderBy.value, orderAsc.value)
    }
    return {orderBy, orderAsc, sort}
  }
});
{{~ if class.referred_single ~}}
app.component('{{ kebab_case class.name }}', {
  template: `
  {{~ if class.has_child ~}}
  <h5 class="text-disabled table-cell font-bold" v-if="activeProperty === null">{{ class.name.plural }}</h5>
  <h5 class="text-primary hover:text-primaryHover cursor-pointer table-cell font-bold" @click="activeProperty = null" v-else>{{ class.name.plural }}</h5>
  <h5 class="text-primary px-2 table-cell font-bold" v-if="activeProperty !== null">/</h5>
  {{~ else ~}}
  <h5 class="text-disabled table-cell font-bold">{{ class.name.plural }}</h5>
  {{~ end ~}}
  <{{ kebab_case class.name }}-table :sortable="false" {{ if class.has_child }} v-if="activeProperty === null"{{ end }}>
    <{{ kebab_case class.name }}-row :modelValue="modelValue" @update:modelValue="update" :deletable="false"{{ if class.has_child }} @show="show"{{ end }} v-if="modelValue"></{{ kebab_case class.name }}-row>
    <tr v-else>
      <button class="bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 rounded-full"  @click="$emit('update:modelValue', {})">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
        </svg>
      </button>
    </tr>
  </{{ kebab_case class.name }}-table>
  {{~ for property in class.child_references ~}}
      {{~ if property.is_collection ~}}
      <{{ kebab_case property.class.name.plural }} :modelValue="modelValue[activeProperty]" @update:modelValue="updateChild" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name.plural }}>
      {{~ else ~}}
      <{{ kebab_case property.class.name }} :modelValue="modelValue[activeProperty]" @update:modelValue="updateChild" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name }}>
      {{~ end ~}}
  {{~ end ~}}`,
  name: '{{ class.name }}',
  props: {
    modelValue: Object
  },
  emits: ['update:modelValue'{{ if class.has_child }}, 'show'{{ end }}],
  setup(props, context) {
    {{~ if class.has_child ~}}
    const activeProperty = ref(null);

    {{~ end ~}}
    function update(newValue) {
      context.emit('update:modelValue', newValue);
    }
    {{~ if class.has_child ~}}
    function show(property) {
      activeProperty.value = property;
    }

    function updateChild(newValue) {
      let newObj = {...props.modelValue};
      newObj[activeProperty.value] = newValue;
      context.emit('update:modelValue', newObj);
    }
    {{~ end ~}}
    return { update{{ if class.has_child }}, show, activeProperty, updateChild{{ end }} }
  }
});
{{~ end ~}}

{{~ if class.referred_plural ~}}
app.component('{{ kebab_case class.name.plural }}', {
  template: `
  {{~ if class.has_child ~}}
  <h5 class="text-disabled table-cell font-bold" v-if="activeProperty === null">{{ class.name.plural }}</h5>
  <h5 class="text-primary hover:text-primaryHover cursor-pointer table-cell font-bold" @click="activeProperty = null" v-else>{{ class.name.plural }}</h5>
  <h5 class="text-primary px-2 table-cell font-bold" v-if="activeProperty !== null">/</h5>
  <search v-if="activeProperty === null" :value="searchText" @update="updateSearchText"></search>
  {{~ else ~}}
  <h5 class="text-disabled table-cell font-bold">{{ class.name.plural }}</h5>
  <search :value="searchText" @update="updateSearchText"></search>
  {{~ end ~}}
  <{{ kebab_case class.name }}-table :sortable="true" @sort="sort" {{ if class.has_child }} v-if="activeProperty === null"{{ end }}>
  <{{ kebab_case class.name }}-row v-for="item in items" :key="item.idx" :modelValue="item.value" @update:modelValue="updateItem(item.idx, $event)" @delete="deleteItem(item.idx)" :deletable="true"{{ if class.has_child }} @show="show(item.idx, $event)"{{ end }} v-if="modelValue"></{{ kebab_case class.name }}-row>
  <tr v-if="newItem" class="bg-primaryActive">
      <{{ kebab_case class.name }}-form :modelValue="newItem" @update:modelValue="saveNewItem" @canceled="cancelAdd"></{{ kebab_case class.name }}-form>
    </tr>
    <tr v-else>
      <td class="p-4 text-slate-500 text-left">
        <button class="bg-primary hover:bg-primaryHover text-white text-sm font-bold py-1 px-4 rounded-full" @click="addNewItem"  v-if="!newItem">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
          </svg>
        </button>
      </td>
    </tr>
  </{{ kebab_case class.name }}-table>
  <div {{ if class.has_child }} v-if="activeProperty === null"{{ end }}>
    <pagination :count="modelValue.length" @range="setRange"></pagination>
  </div>
  {{~ for property in class.child_references ~}}
      {{~ if property.is_collection ~}}
      <{{ kebab_case property.class.name.plural }} :modelValue="modelValue[activeIdx][activeProperty]" @update:modelValue="updateChild" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name.plural }}>
      {{~ else ~}}
      <{{ kebab_case property.class.name }} :modelValue="modelValue[activeIdx][activeProperty]" @update:modelValue="updateChild" v-if="activeProperty === '{{ camel_case property.name }}'"></{{ kebab_case property.class.name }}>
      {{~ end ~}}
  {{~ end ~}}`,
  name: '{{ class.name.plural }}',
  props: {
    modelValue: Array
  },
  emits: ['update:modelValue'{{ if class.has_child }}, 'show'{{ end }}],
  setup(props, context) {
    const newItem = ref(null);
    const orderBy = ref('');
    const orderAsc = ref(true);
    const rangeStart = ref(0);
    const rangeEnd = ref(props.modelValue.length);
    const searchText = ref('');
    const items = computed(function(){
      if (!props.modelValue)
        return [];
      const newList = props.modelValue.map((value, idx) => { return {idx, value} });
      if(searchText.value !== '') {
        const indexs = [];
        for (let i = 0; i < newList.length; i++) {
          let removeElement = true;
          for(const property in newList[i].value) {
            if(typeof(newList[i].value[property]) == 'object') {
              continue;
            }
            const element = newList[i].value[property].toString();
            if(element.toUpperCase().includes(searchText.value.toUpperCase())) {
              removeElement = false;
              break;
            }
          }
          if(removeElement) {
            indexs.push(newList[i].idx);
          }
        }
        for(let j = 0; j < indexs.length; j++) {
          for(let k = 0; k < newList.length; k++) {
            if(newList[k].idx == indexs[j]) {
              newList.splice(k, 1);
            }
          }
        }
      }
      const ordBy = orderBy.value;
      const asc = orderAsc.value;
      if (ordBy !== '')
        newList.sort((a, b) => { 
            if (a.value[ordBy] < b.value[ordBy] ^ asc)
              return 1;
            if (a.value[ordBy] > b.value[ordBy] ^ asc)
              return -1;
            return 0
          });
      return newList.slice(rangeStart.value, rangeEnd.value);
    });
    {{~ if class.has_child ~}}
    const activeProperty = ref(null);
    const activeIdx = ref(null);

    function show(idx, property) {
      activeIdx.value = idx;
      activeProperty.value = property;
    }

    function updateChild(newValue) {
      let newList = [...props.modelValue];
      newList[activeIdx.value] = { ...newList[activeIdx.value] };
      newList[activeIdx.value][activeProperty.value] = newValue;
      context.emit('update:modelValue', newList);
    }
    {{~ end ~}}

    function sort(propName, asc) {
      orderBy.value = propName;
      orderAsc.value = asc;
    }
    
    function setRange(start, end) {
      rangeStart.value = start;
      rangeEnd.value = end;
    }

    function deleteItem(idx) {
      if (confirm('Are you sure to delete this {{ camel_case (to_words class.name) }}?')) {
        context.emit('update:modelValue', props.modelValue.filter((item, i) => i !== idx));
      }
    }
    function updateItem(idx, item) {
      let newList = [...props.modelValue];
      newList[idx] = item;
      context.emit('update:modelValue', newList);
    }
    function addNewItem() {
      newItem.value = {
        {{~ for property in class.json_properties ~}}
        {{ camel_case property.name }}: {{ default_value property }}{{if !for.last}},{{end}}
        {{~ end ~}}
      };
    }
    function saveNewItem(item) {
      if (props.modelValue) {
        const items = [...props.modelValue];
        items.push(item);
        context.emit('update:modelValue', items)
      } else {
        context.emit('update:modelValue', [item])
      }
      newItem.value = null
    }
    function cancelAdd() {
        newItem.value = null;
    }
    function updateSearchText(text) {
      searchText.value = text;
    }

    return {
      sort,
      setRange,
      items,
      newItem,
      searchText,
      updateSearchText,
      deleteItem,
      updateItem,
      addNewItem,
      saveNewItem,
      cancelAdd{{ if class.has_child }},
      show,
      activeIdx,
      activeProperty,
      updateChild
      {{~ end ~}}
    };
  }
});
{{~ end ~}}
{{~ end ~}}

app.mount('#app');
