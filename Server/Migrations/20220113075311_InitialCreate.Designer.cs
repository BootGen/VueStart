// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VueStart;

#nullable disable

namespace VueStart.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220113075311_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("VueStart.ClientError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ClientErrors");
                });

            modelBuilder.Entity("VueStart.ProfilerRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<long>("Database")
                        .HasColumnType("bigint");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<long>("Download")
                        .HasColumnType("bigint");

                    b.Property<long>("Generate")
                        .HasColumnType("bigint");

                    b.Property<long>("GeoLocation")
                        .HasColumnType("bigint");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProfilerRecords");
                });

            modelBuilder.Entity("VueStart.ServerError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("File")
                        .HasColumnType("longtext");

                    b.Property<int>("HResult")
                        .HasColumnType("int");

                    b.Property<int>("Line")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("Source")
                        .HasColumnType("longtext");

                    b.Property<string>("StackTrace")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ServerErrors");
                });

            modelBuilder.Entity("VueStart.StatisticRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EditorDownloadedCount")
                        .HasColumnType("int");

                    b.Property<int>("EditorGeneratedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstUse")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FormDownloadedCount")
                        .HasColumnType("int");

                    b.Property<int>("FormGeneratedCount")
                        .HasColumnType("int");

                    b.Property<int>("Hash")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUse")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ViewDownloadedCount")
                        .HasColumnType("int");

                    b.Property<int>("ViewGeneratedCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StatisticRecords");
                });

            modelBuilder.Entity("VueStart.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int?>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitorId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("VueStart.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BrowserFamily")
                        .HasColumnType("longtext");

                    b.Property<string>("BrowserMajor")
                        .HasColumnType("longtext");

                    b.Property<string>("BrowserMinor")
                        .HasColumnType("longtext");

                    b.Property<string>("Citation")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<string>("DeviceBrand")
                        .HasColumnType("longtext");

                    b.Property<string>("DeviceFamily")
                        .HasColumnType("longtext");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FirstVisit")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OSFamily")
                        .HasColumnType("longtext");

                    b.Property<string>("OSMajor")
                        .HasColumnType("longtext");

                    b.Property<string>("OSMinor")
                        .HasColumnType("longtext");

                    b.Property<string>("Region")
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("VueStart.Visit", b =>
                {
                    b.HasOne("VueStart.Visitor", null)
                        .WithMany("Visits")
                        .HasForeignKey("VisitorId");
                });

            modelBuilder.Entity("VueStart.Visitor", b =>
                {
                    b.Navigation("Visits");
                });
#pragma warning restore 612, 618
        }
    }
}
