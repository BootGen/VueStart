const ref = Vue.ref;
const reactive = Vue.reactive;
const watchEffect = Vue.watchEffect;
{{~ for class in classes
  if class.is_root
    root = class
    break
  end 
end ~}}
const  app = Vue.createApp({
  template: '<{{ kebab_case root.name }}-list v-model="{{ camel_case root.name }}List"></{{ kebab_case root.name }}-list>',
  name: 'App',
  setup: function () {
    const {{ camel_case root.name }}List = ref([]);
    function toDataModel(data) {
      return data.map((val, idx) => {
        const v = { ... val };
        for (const property in v) {
          if(Array.isArray(v[property])){
            v[property] = toDataModel(v[property]);
          }
        }
        return {
          id: idx,
          value: v
        }
      })
    }
    function toSimpleArray(data) {
      let arr =  data.map(val => {
        return { ...val.value }
      });
      arr.forEach(item => {
        for (const property in item) {
          if(Array.isArray(item[property])){
            item[property] = toSimpleArray(item[property]);
          }
        }
      });
      return arr;
    }
    function loadFromLocalStorage() {
      let json = localStorage.getItem('json');
      if (json) {
        const {{ camel_case root.name.plural }} = JSON.parse(json).{{ camel_case root.name.plural }};
        if ({{ camel_case root.name.plural }}) {
          {{ camel_case root.name }}List.value = toDataModel({{ camel_case root.name.plural }});
        }
      }
    }
    loadFromLocalStorage();

    window.addEventListener('storage', loadFromLocalStorage);
    return { {{ camel_case root.name }}List  }
  },
});

{{~ for class in classes ~}}
app.component('{{ kebab_case class.name }}-view', {
  template: `
  {{~ for property in class.common_properties
  if !property.is_key ~}}
  <li class="list-group-item">
    <div class="row">
      <div class="col-4 d-flex justify-content-start text-break text-start">
        {{ property.name }}:
      </div>
      <div class="col-8 d-flex justify-content-start text-break">
        {{'{{'}} modelValue.{{ camel_case property.name }} {{'}}'}}
      </div>
    </div>
  </li>
  {{~ end
      end ~}}
  `,
  name: '{{ class.name }}View',
  props: {
    modelValue: Object,
  }
});

app.component('{{ kebab_case class.name }}-list', {
  template: `
  <div class="row">
    <div class="col-12 d-flex justify-content-between">
      {{ class.name.plural }}:
    </div>
    <div class="col-12 mb-2" v-for="item in modelValue" :key="item.id">
      <div class="card">
        <ul class="list-group list-group-flush">
          <{{ kebab_case class.name }}-view v-model="item.value"></{{ kebab_case class.name }}-view>
          {{~ for property in class.properties
              if property.is_collection && property.class
              ~}}
          <li class="list-group-item">
          <{{ kebab_case property.class.name }}-list v-model="item.value.{{ camel_case property.class.name.plural }}"></{{ kebab_case property.class.name }}-list>
          </li>
          {{~ end
              end ~}}
        </ul>
      </div>
    </div>
  </div>`,
  name: '{{ class.name }}List',
  props: {
    modelValue: Object
  }
});
{{~ end ~}}

app.mount('#app');